["package com.example.blog_server;\n\nimport org.modelmapper.ModelMapper;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\n\n@SpringBootApplication\npublic class BlogServerApplication {\n\n\t\n\n\t@Bean\n    public ModelMapper modelMapper() {\n        return new ModelMapper();\n    }\n\n\t@Bean\n\tpublic PasswordEncoder PasswordEncoder(){\n\t\treturn new BCryptPasswordEncoder();\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(BlogServerApplication.class, args);\n\t}\n \n}\n", "package com.example.blog_server.article;\n\nimport java.net.URI;\nimport java.util.Optional;\n\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.security.core.annotation.AuthenticationPrincipal;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.PutMapping;\nimport org.springframework.web.bind.annotation.DeleteMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestHeader;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.servlet.support.ServletUriComponentsBuilder;\n\nimport com.example.blog_server.article.dtos.CreateArticleRequest;\nimport com.example.blog_server.article.dtos.Upda", "mple.blog_server.article.dtos.CreateArticleRequest;\nimport com.example.blog_server.article.dtos.UpdateArticleRequest;\nimport com.example.blog_server.security.JWTService;\nimport com.example.blog_server.user.UserEntity;\n\n@RestController\n@RequestMapping(\"/articles\")\npublic class ArticleController {\n\n    private final ArticleService articleService;\n    private final JWTService jwtService;\n    public ArticleController(ArticleService articleService, JWTService jwtService) {\n        this.articleService = articleService;\n        this.jwtService = jwtService;\n    }\n\n    @GetMapping(\"\")\n    public ResponseEntity<Iterable<ArticleEntity>> getAllArticles() {\n        try {\n            Iterable<ArticleEntity> articles = articleService.getAllArticle();\n            return ResponseEntity.ok(articles);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n                    .body(null);\n        }\n    }\n\n    @GetMapping", "(HttpStatus.INTERNAL_SERVER_ERROR)\n                    .body(null);\n        }\n    }\n\n    @GetMapping(\"/{id}\")\n    public ResponseEntity<ArticleEntity> getArticleById(@PathVariable(\"id\") Long id) {\n        try {\n            ArticleEntity article = articleService.getArticleById(id).get(); // Assuming ID can be slug, otherwise\n                                                                             // adjust this\n            return ResponseEntity.ok(article);\n        } catch (ArticleService.ArticleNotFoundException e) {\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n                    .body(null);\n        }\n    }\n\n    @PostMapping(\"\")\n    public ResponseEntity<?> createArticle(@AuthenticationPrincipal UserEntity user,\n            @RequestBody CreateArticleRequest article) {\n        try {\n            if (article.getTitl", "          @RequestBody CreateArticleRequest article) {\n        try {\n            if (article.getTitle() != null && article.getBody() != null) {\n                ArticleEntity createdArticle = articleService.createArticle(article, user.getId());\n                URI location = ServletUriComponentsBuilder.fromCurrentRequest()\n                        .path(\"/{id}\")\n                        .buildAndExpand(createdArticle.getId())\n                        .toUri();\n                return ResponseEntity.created(location).body(createdArticle);\n            } else {\n                return ResponseEntity.badRequest().body(\"Title and body must not be null\");\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n                    .body(\"An error occurred while creating the article\");\n        }\n    }\n\n    @PutMapping(\"/{id}\")\n    public ResponseEntity<?> updateArticle(@PathVariable(\"id\") Long articleId", "  @PutMapping(\"/{id}\")\n    public ResponseEntity<?> updateArticle(@PathVariable(\"id\") Long articleId,\n                                           @RequestBody UpdateArticleRequest articleRequest,\n                                           @RequestHeader(\"Authorization\") String authHeader) {\n        try {\n            // Extract the JWT token and retrieve the userId\n            String token = authHeader.replace(\"Bearer \", \"\");\n            Long userId = jwtService.retrieveUserId(token);\n\n            // Call the update service method with the userId\n            ArticleEntity updatedArticle = articleService.updateArticle(articleId, articleRequest, userId);\n\n            return ResponseEntity.ok(updatedArticle);\n        } catch (ArticleService.UnauthorizedException e) {\n            return ResponseEntity.status(HttpStatus.FORBIDDEN).body(e.getMessage());\n        } catch (ArticleService.ArticleNotFoundException e) {\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage", "FoundException e) {\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage());\n        } catch (Exception e) {\n            e.printStackTrace();\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n                    .body(\"An error occurred while updating the article\");\n        }\n    }\n\n    @DeleteMapping(\"/{id}\")\n    public ResponseEntity<?> deleteArticle(@PathVariable(\"id\") Long id) {\n        try {\n            articleService.deleteArticle(id);\n            return ResponseEntity.noContent().build();\n        } catch (ArticleService.ArticleNotFoundException e) {\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(\"Article not found\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n                    .body(\"An error occurred while deleting the article\");\n        }\n    }\n    \n}\n", "eting the article\");\n        }\n    }\n    \n}\n", "package com.example.blog_server.article;\n\nimport org.springframework.lang.NonNull;\n\nimport com.example.blog_server.user.UserEntity;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.JoinColumn;\nimport jakarta.persistence.ManyToOne;\nimport lombok.AccessLevel;\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.RequiredArgsConstructor;\nimport lombok.Setter;\nimport lombok.ToString;\n\n\n@Entity(name = \"articles\")\n@Getter\n@Setter\n@ToString\n@Builder\n@RequiredArgsConstructor\n@AllArgsConstructor\n@NoArgsConstructor(access = AccessLevel.PROTECTED)\npublic class ArticleEntity {\n    \n    @Id\n    @GeneratedValue(strategy = GenerationType.SEQUENCE)\n    @Column(nullable = false)\n    private Long id;\n\n\n    @NonNull\n    private String title;\n\n    @NonNull\n    @Column(uni", "= false)\n    private Long id;\n\n\n    @NonNull\n    private String title;\n\n    @NonNull\n    @Column(unique = true)\n    private String slug;\n\n    @NonNull\n    private String subtitle;\n\n    @NonNull\n    @Column(length = 65535)\n    private String body;\n\n    private String createdAt;\n\n\n    @Column(length = 65535)\n    private String imageLink;\n\n    @ManyToOne\n    @JoinColumn(name = \"authorId\", nullable = false)\n    private UserEntity author;\n    \n}\n", "package com.example.blog_server.article;\n\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface ArticleRepository extends JpaRepository<ArticleEntity, Long>{\n    ArticleEntity findBySlug(String slug);\n}\n", "package com.example.blog_server.article;\n\nimport java.util.Optional;\n\nimport org.springframework.stereotype.Service;\n\nimport com.example.blog_server.article.dtos.CreateArticleRequest;\nimport com.example.blog_server.article.dtos.UpdateArticleRequest;\nimport com.example.blog_server.comments.CommentService;\nimport com.example.blog_server.user.UserRepository;\nimport com.example.blog_server.user.UserService;\n\nimport jakarta.transaction.Transactional;\n\n@Service\npublic class ArticleService {\n    private final ArticleRepository articleRepository;\n    private final UserRepository userRepository;\n    private final CommentService commentService;\n\n    public ArticleService(ArticleRepository articleRepository, UserRepository userRepository,\n        CommentService commentService) {\n        this.articleRepository = articleRepository;\n        this.userRepository = userRepository;\n        this.commentService = commentService; // Initialize CommentService\n    }\n\n    public Iterable<ArticleEntity> getAll", "vice = commentService; // Initialize CommentService\n    }\n\n    public Iterable<ArticleEntity> getAllArticle() {\n        return articleRepository.findAll();\n    }\n\n    public ArticleEntity getArticleBySlug(String slug) {\n        var article = articleRepository.findBySlug(slug);\n        if (article == null) {\n            throw new ArticleNotFoundException(slug);\n        }\n        return article;\n    }\n\n    public ArticleEntity createArticle(CreateArticleRequest a, Long authorId) {\n        var author = userRepository.findById(authorId)\n                .orElseThrow(() -> new UserService.UserNotFoundException(authorId));\n        return articleRepository.save(ArticleEntity.builder()\n                .title(a.getTitle())\n                .slug(a.getTitle().toLowerCase().replaceAll(\"\\\\s+\", \"-\"))\n                .body(a.getBody())\n                .subtitle(a.getSubtitle())\n                .imageLink(a.getImageLink())\n                .author(author)\n                .build());\n    }\n\n    public Art", "k(a.getImageLink())\n                .author(author)\n                .build());\n    }\n\n    public ArticleEntity updateArticle(Long articleId, UpdateArticleRequest a, Long userId) {\n        var article = articleRepository.findById(articleId).orElseThrow(() -> new ArticleNotFoundException(articleId));\n\n        if (!article.getAuthor().getId().equals(userId)) {\n            throw new UnauthorizedException(\"You are not authorized to update this article\");\n        }\n\n        if (a.getTitle() != null) {\n            article.setTitle(a.getTitle());\n            article.setSlug(a.getTitle().toLowerCase().replaceAll(\"\\\\s+\", \"-\"));\n\n        }\n\n        if (a.getBody() != null) {\n            article.setBody(a.getBody());\n\n        }\n\n        if (a.getSubtitle() != null) {\n            article.setSubtitle(a.getSubtitle());\n\n        }\n\n        if (a.getImageLink() != null) {\n            article.setImageLink(a.getImageLink());\n        }\n\n        return articleRepository.save(article);\n\n    }\n\n    static cl", "(a.getImageLink());\n        }\n\n        return articleRepository.save(article);\n\n    }\n\n    static class UnauthorizedException extends RuntimeException {\n        public UnauthorizedException(String message) {\n            super(message);\n        }\n    }\n\n    public static class ArticleNotFoundException extends IllegalArgumentException {\n        public ArticleNotFoundException(String slug) {\n            super(\"Article \" + slug + \" not found\");\n        }\n\n        public ArticleNotFoundException(Long id) {\n            super(\"Article with id: \" + id + \" not found\");\n        }\n    }\n\n    public Optional<ArticleEntity> getArticleById(Long id) {\n        // TODO Auto-generated method stub\n        var article = articleRepository.findById(id);\n        if (article == null) {\n            throw new ArticleNotFoundException(id);\n        }\n        return article;\n    }\n\n    @Transactional\n    public void deleteArticle(Long id) {\n        if (articleRepository.existsById(id)) {\n            // Delete all ", " deleteArticle(Long id) {\n        if (articleRepository.existsById(id)) {\n            // Delete all comments associated with the article\n            commentService.deleteAllByArticleId(id);\n            \n            // Delete the article\n            articleRepository.deleteById(id);\n        } else {\n            throw new ArticleNotFoundException(id); // Custom exception if article not found\n        }\n    }\n}\n", "package com.example.blog_server.article.dtos;\n\nimport lombok.AccessLevel;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NonNull;\nimport lombok.Setter;\nimport org.springframework.lang.Nullable;\n\n@Data\n@Setter(AccessLevel.NONE)\n@Builder\npublic class CreateArticleRequest {\n    @NonNull\n    private String title;\n    @NonNull\n    private String body;\n    @Nullable\n    private String subtitle;\n    @Nullable\n    private String imageLink;\n}", "package com.example.blog_server.article.dtos;\n\nimport org.springframework.lang.Nullable;\n\nimport lombok.AccessLevel;\nimport lombok.Data;\nimport lombok.Setter;\n\n@Data\n@Setter(AccessLevel.NONE)\npublic class UpdateArticleRequest {\n    @Nullable\n    private String title;\n    @Nullable\n    private String body;\n    @Nullable\n    private String subtitle;\n    @Nullable\n    private String imageLink;\n\n}", "package com.example.blog_server.comments;\n\nimport java.util.Date;\n\nimport org.springframework.data.annotation.CreatedDate;\nimport jakarta.persistence.Id;\nimport org.springframework.lang.Nullable;\n\nimport com.example.blog_server.article.ArticleEntity;\nimport com.example.blog_server.user.UserEntity;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.JoinColumn;\nimport jakarta.persistence.ManyToOne;\nimport lombok.AccessLevel;\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.NonNull;\nimport lombok.RequiredArgsConstructor;\nimport lombok.Setter;\nimport lombok.ToString;\n\n@Entity(name = \"comments\")\n@Getter\n@Setter\n@ToString\n@Builder\n@RequiredArgsConstructor\n@AllArgsConstructor\n@NoArgsConstructor(access = AccessLevel.PROTECTED)\npublic class CommentEntity {\n    @Id\n    @GeneratedValue(stra", "ructor(access = AccessLevel.PROTECTED)\npublic class CommentEntity {\n    @Id\n    @GeneratedValue(strategy = GenerationType.SEQUENCE)\n    @Column(nullable = false)\n    private Long id;\n\n    @Nullable\n    private String title;\n\n    @Column(length = 65535)\n    @NonNull\n    private String body;\n\n    @CreatedDate\n    private Date createdAt;\n\n    @ManyToOne\n    @JoinColumn(name = \"articleId\", nullable = false)\n    private ArticleEntity article;\n\n    @ManyToOne\n    @JoinColumn(name = \"authorId\", nullable = false)\n    private UserEntity author;\n\n\n}", "package com.example.blog_server.comments;\n\nimport java.util.List;\n\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface CommentRepository extends JpaRepository<CommentEntity, Long> {\n    List<CommentEntity> findAllByArticleId(Long articleId);\n    void deleteAllByArticleId(Long articleId);\n}\n", "package com.example.blog_server.comments;\n\nimport org.springframework.web.bind.annotation.*;\nimport com.example.blog_server.article.ArticleService;\nimport com.example.blog_server.comments.dtos.CreateCommentRequest;\nimport com.example.blog_server.security.JWTService;\n\n@RestController\n@RequestMapping(\"/articles/{articleSlug}/comments\")\npublic class CommentsController {\n\n    private final CommentService commentService;\n    private final ArticleService articleService;\n\n    private final JWTService jwtService;\n\n    public CommentsController(CommentService commentService, ArticleService articleService, JWTService jwtService) {\n        this.commentService = commentService;\n        this.articleService = articleService;\n        this.jwtService = jwtService;\n    }\n\n\n\n    @GetMapping\n    public Iterable<CommentEntity> getCommentsByArticleSlug(@PathVariable(\"articleSlug\") String articleSlug) {\n        // Get the article by slug\n        var article = articleService.getArticleBySlug(articleSlug);\n  ", "   // Get the article by slug\n        var article = articleService.getArticleBySlug(articleSlug);\n        // Fetch comments for the article\n        return commentService.getCommentsByArticle(article.getId());\n    }\n\n    @PostMapping\n    public CommentEntity createComment(@PathVariable(\"articleSlug\") String articleSlug,\n                                       @RequestBody CreateCommentRequest request,\n                                       @RequestHeader(\"Authorization\") String token) {\n        // Extract userId from JWT token\n        Long userId = extractUserIdFromToken(token);\n        // Get the article by slug\n        var article = articleService.getArticleBySlug(articleSlug);\n        // Create and return the new comment\n        return commentService.createComment(request, userId, article.getId());\n    }\n\n    @DeleteMapping(\"/{commentId}\")\n    public void deleteComment(@PathVariable(\"articleSlug\") String articleSlug,\n                              @PathVariable(\"commentId\") Long commen", "ticleSlug\") String articleSlug,\n                              @PathVariable(\"commentId\") Long commentId,\n                              @RequestHeader(\"Authorization\") String token) {\n        // Extract userId from JWT token\n        Long userId = extractUserIdFromToken(token);\n        // Delete the comment\n        commentService.deleteComment(commentId, userId);\n    }\n\n    private Long extractUserIdFromToken(String token) {\n        // Assuming the JWT token starts with \"Bearer \"\n        String jwtToken = token.substring(7);\n        return jwtService.retrieveUserId(jwtToken);\n    }\n\n    \n}\n", "package com.example.blog_server.comments;\n\nimport java.util.Optional;\n\nimport org.springframework.stereotype.Service;\n\nimport com.example.blog_server.article.ArticleEntity;\nimport com.example.blog_server.article.ArticleRepository;\nimport com.example.blog_server.article.ArticleService;\nimport com.example.blog_server.comments.dtos.CreateCommentRequest;\nimport com.example.blog_server.user.UserRepository;\nimport com.example.blog_server.user.UserService;\n\n@Service\npublic class CommentService {\n    private final CommentRepository commentRepository;\n    private final ArticleRepository articleRepository;\n    private final UserRepository userRepository;\n\n    public CommentService(CommentRepository commentRepository, ArticleRepository articleRepository, UserRepository userRepository) {\n        this.commentRepository = commentRepository;\n        this.articleRepository = articleRepository;\n        this.userRepository = userRepository;\n    }\n\n    public Iterable<CommentEntity> getCommentsByArticle(", "his.userRepository = userRepository;\n    }\n\n    public Iterable<CommentEntity> getCommentsByArticle(Long articleId) {\n        return commentRepository.findAllByArticleId(articleId);\n    }\n\n    public CommentEntity createComment(CreateCommentRequest request, Long authorId, Long articleId) {\n        var article = articleRepository.findById(articleId)\n                .orElseThrow(() -> new ArticleService.ArticleNotFoundException(articleId));\n\n        var author = userRepository.findById(authorId)\n                .orElseThrow(() -> new UserService.UserNotFoundException(authorId));\n\n        var comment = CommentEntity.builder()\n                .body(request.getBody())\n                .title(request.getTitle())\n                .article(article)\n                .author(author)\n                .build();\n\n        return commentRepository.save(comment);\n    }\n\n    public void deleteComment(Long commentId, Long userId) {\n        var comment = commentRepository.findById(commentId)\n                ", "mmentId, Long userId) {\n        var comment = commentRepository.findById(commentId)\n                .orElseThrow(() -> new CommentNotFoundException(commentId));\n\n        if (!comment.getAuthor().getId().equals(userId)) {\n            throw new UnauthorizedException(\"You are not authorized to delete this comment\");\n        }\n\n        commentRepository.deleteById(commentId);\n    }\n    \n    public void deleteAllByArticleId(Long articleId) {\n        commentRepository.deleteAllByArticleId(articleId);\n    }\n\n    static class UnauthorizedException extends RuntimeException {\n        public UnauthorizedException(String message) {\n            super(message);\n        }\n    }\n\n    static class CommentNotFoundException extends IllegalArgumentException {\n        public CommentNotFoundException(Long id) {\n            super(\"Comment with id: \" + id + \" not found\");\n        }\n    }\n}\n", "package com.example.blog_server.comments.dtos;\n\nimport lombok.Builder;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\n@Builder\npublic class CreateCommentRequest {\n    private String title;\n    private String body;\n}\n", "package com.example.blog_server.common;\n\nimport org.springframework.stereotype.Component;\n\nimport com.example.blog_server.article.ArticleService;\nimport com.example.blog_server.article.dtos.CreateArticleRequest;\nimport com.example.blog_server.comments.CommentService;\nimport com.example.blog_server.comments.dtos.CreateCommentRequest;\nimport com.example.blog_server.user.UserService;\nimport com.example.blog_server.user.dtos.CreateUserRequest;\n\n@Component\npublic class SeedData {\n    UserService userService;\n    ArticleService articleService;\n    CommentService commentService;\n\n    public SeedData(UserService userService, ArticleService articleService, CommentService commentService) {\n        System.out.println(\"########################Seeding Data#########################\");\n        this.userService = userService;\n        this.articleService = articleService;\n        this.commentService = commentService;\n\n        createUsers();\n        createArticles();\n        createComments();\n    }\n\n   ", "mmentService;\n\n        createUsers();\n        createArticles();\n        createComments();\n    }\n\n    public void createUsers(){\n        userService.createUser(CreateUserRequest.builder().username(\"siddharth\").password(\"Sid@1234\").email(\"siddharth@gmail.com\").build());\n        userService.createUser(CreateUserRequest.builder().username(\"siddharth1\").password(\"Sid@1234\").email(\"siddharth1@gmail.com\").build());\n        userService.createUser(CreateUserRequest.builder().username(\"siddharth2\").password(\"Sid@1234\").email(\"siddharth2@gmail.com\").build());\n        userService.createUser(CreateUserRequest.builder().username(\"siddharth3\").password(\"Sid@1234\").email(\"siddharth3@gmail.com\").build());\n    }\n\n\n    public void createArticles(){\n\n        var user = userService.getUser(\"siddharth\");\n        var user1 = userService.getUser(\"siddharth1\");\n        var user2 = userService.getUser(\"siddharth2\");\n        var user3 = userService.getUser(\"siddharth3\");\n        articleService.createArticle(Crea", "\");\n        var user3 = userService.getUser(\"siddharth3\");\n        articleService.createArticle(CreateArticleRequest.builder().title(\"Title1\").body(\"<ul>\\n\" + //\n                        \"        <li>The Moon is Earth's only natural satellite and the fifth-largest moon in the Solar System.</li>\\n\" + //\n                        \"        <li>It is about 384,400 km (238,855 miles) away from Earth.</li>\\n\" + //\n                        \"        <li>The Moon has a diameter of 3,474 km (2,159 miles), about one-quarter the size of Earth.</li>\\n\" + //\n                        \"        <li>It takes approximately 27.3 days for the Moon to orbit Earth, known as a sidereal month.</li>\\n\" + //\n                        \"        <li>The Moon's surface is covered in craters, valleys, and flat plains called maria.</li>\\n\" + //\n                        \"        <li>The far side of the Moon, often mistakenly called the \\\"dark side,\\\" is never visible from Earth.</li>\\n\" + //\n                        \"        <l", "led the \\\"dark side,\\\" is never visible from Earth.</li>\\n\" + //\n                        \"        <li>The Moon has a very thin atmosphere called an exosphere, which does not support life.</li>\\n\" + //\n                        \"        <li>The Moon influences Earth's tides due to its gravitational pull.</li>\\n\" + //\n                        \"        <li>It experiences extreme temperature variations, ranging from -173\u00b0C (-280\u00b0F) at night to 127\u00b0C (260\u00b0F) during the day.</li>\\n\" + //\n                        \"        <li>The Moon has no water in liquid form, but water ice has been found in permanently shadowed craters.</li>\\n\" + //\n                        \"        <li>The Moon's gravitational pull is about one-sixth that of Earth's, making objects weigh less.</li>\\n\" + //\n                        \"        <li>During a lunar eclipse, the Earth comes between the Sun and the Moon, casting a shadow on the Moon.</li>\\n\" + //\n                        \"        <li>The Moon's phases, such as new moon,", " on the Moon.</li>\\n\" + //\n                        \"        <li>The Moon's phases, such as new moon, full moon, and crescent, are caused by its position relative to Earth and the Sun.</li>\\n\" + //\n                        \"        <li>Neil Armstrong and Buzz Aldrin were the first humans to land on the Moon on July 20, 1969, during NASA's Apollo 11 mission.</li>\\n\" + //\n                        \"        <li>The Moon is slowly drifting away from Earth at a rate of about 3.8 cm (1.5 inches) per year.</li>\\n\" + //\n                        \"        <li>The Moon has no magnetic field, unlike Earth.</li>\\n\" + //\n                        \"        <li>It is believed that the Moon was formed about 4.5 billion years ago, possibly from debris left after a collision between Earth and a Mars-sized object.</li>\\n\" + //\n                        \"        <li>The largest crater on the Moon is the South Pole-Aitken Basin, which is about 2,500 km (1,550 miles) in diameter.</li>\\n\" + //\n                        ", "tken Basin, which is about 2,500 km (1,550 miles) in diameter.</li>\\n\" + //\n                        \"        <li>The Moon's surface is covered in fine dust and rocky debris known as regolith.</li>\\n\" + //\n                        \"        <li>Future space missions, like NASA's Artemis program, aim to return humans to the Moon and establish a sustainable presence.</li>\\n\" + //\n                        \"    </ul>\").subtitle(\"Subtitle1\").imageLink(\"https://wallpapercave.com/wp/GpUHmC4.jpg\").build(), user.getId());\n        articleService.createArticle(CreateArticleRequest.builder().title(\"Title2\").body(\"Body2\").subtitle(\"Subtitle2\").imageLink(\"https://wallpapercave.com/wp/Dvslduk.jpg\").build(), user1.getId());\n        articleService.createArticle(CreateArticleRequest.builder().title(\"Title3\").body(\"Body3\").subtitle(\"Subtitle3\").imageLink(\"https://wallpapercave.com/uwp/uwp4211601.png\").build(), user2.getId());\n        articleService.createArticle(CreateArticleRequest.builder().title(\"Title4\")", " user2.getId());\n        articleService.createArticle(CreateArticleRequest.builder().title(\"Title4\").body(\"Body4\").subtitle(\"Subtitle4\").imageLink(\"https://wallpapercave.com/wp/wp4096172.jpg\").build(), user3.getId());\n        articleService.createArticle(CreateArticleRequest.builder().title(\"Title5\").body(\"Body5\").subtitle(\"Subtitle5\").imageLink(\"https://images2.alphacoders.com/602/thumb-1920-602604.jpg\").build(), user2.getId());\n        articleService.createArticle(CreateArticleRequest.builder().title(\"Title6\").body(\"Body6\").subtitle(\"Subtitle6\").imageLink(\"https://images6.alphacoders.com/133/thumb-1920-1339623.png\").build(), user.getId());\n    }\n\n\n    public void createComments(){\n\n        var user = userService.getUser(\"siddharth\");\n        var user1 = userService.getUser(\"siddharth1\");\n        var user2 = userService.getUser(\"siddharth2\");\n        var user3 = userService.getUser(\"siddharth3\");\n        var article = articleService.getArticleBySlug(\"title1\");\n        var article1 = a", "dharth3\");\n        var article = articleService.getArticleBySlug(\"title1\");\n        var article1 = articleService.getArticleBySlug(\"title2\");\n        var article2 = articleService.getArticleBySlug(\"title3\");  \n        var article3 = articleService.getArticleBySlug(\"title4\");\n        commentService.createComment(CreateCommentRequest.builder().body(\"body1\").title(\"title1\").build(), user.getId(), article.getId());\n        commentService.createComment(CreateCommentRequest.builder().body(\"body2\").title(\"title2\").build(), user1.getId(), article1.getId());\n        commentService.createComment(CreateCommentRequest.builder().body(\"body3\").title(\"title3\").build(), user2.getId(), article2.getId());\n        commentService.createComment(CreateCommentRequest.builder().body(\"body4\").title(\"title4\").build(), user3.getId(), article3.getId());\n\n        var user4 = userService.createUser(CreateUserRequest.builder().username(\"siddharth4\").password(\"Sid@1234\").email(\"siddharth4@gmail.com\").build());\n      ", "builder().username(\"siddharth4\").password(\"Sid@1234\").email(\"siddharth4@gmail.com\").build());\n        var article4 = articleService.createArticle(CreateArticleRequest.builder().title(\"Title7\").body(\"Body7\").subtitle(\"Subtitle7\").imageLink(\"https://images5.alphacoders.com/602/thumb-1920-602604.jpg\").build(), user4.getId());\n        commentService.createComment(CreateCommentRequest.builder().body(\"body5\").title(\"title5\").build(), user4.getId(), article4.getId());\n        \n        var user5 = userService.createUser(CreateUserRequest.builder().username(\"siddharth5\").password(\"Sid@1234\").email(\"siddharth5@gmail.com\").build());\n        var article5 = articleService.createArticle(CreateArticleRequest.builder().title(\"Title8\").body(\"Body8\").subtitle(\"Subtitle8\").imageLink(\"https://images2.alphacoders.com/602/thumb-1920-602604.jpg\").build(), user5.getId());\n        commentService.createComment(CreateCommentRequest.builder().body(\"body6\").title(\"title6\").build(), user5.getId(), article5.getId())", "eateCommentRequest.builder().body(\"body6\").title(\"title6\").build(), user5.getId(), article5.getId());\n\n        var user6 = userService.createUser(CreateUserRequest.builder().username(\"siddharth6\").password(\"Sid@1234\").email(\"siddharth6@gmail.com\").build());\n        var article6 = articleService.createArticle(CreateArticleRequest.builder().title(\"Title9\").body(\"Body9\").subtitle(\"Subtitle9\").imageLink(\"https://images6.alphacoders.com/133/thumb-1920-1339623.png\").build(), user6.getId());\n        commentService.createComment(CreateCommentRequest.builder().body(\"body7\").title(\"title7\").build(), user6.getId(), article6.getId());\n\n        var user7 = userService.createUser(CreateUserRequest.builder().username(\"siddharth7\").password(\"Sid@1234\").email(\"siddharth7@gmail.com\").build());\n        var article7 = articleService.createArticle(CreateArticleRequest.builder().title(\"Title10\").body(\"Body10\").subtitle(\"Subtitle10\").imageLink(\"https://images5.alphacoders.com/602/thumb-1920-602604.jpg\").buil", ").subtitle(\"Subtitle10\").imageLink(\"https://images5.alphacoders.com/602/thumb-1920-602604.jpg\").build(), user7.getId());\n        commentService.createComment(CreateCommentRequest.builder().body(\"body8\").title(\"title8\").build(), user7.getId(), article7.getId());\n\n        var user8 = userService.createUser(CreateUserRequest.builder().username(\"siddharth8\").password(\"Sid@1234\").email(\"siddharth8@gmail.com\").build());\n        var article8 = articleService.createArticle(CreateArticleRequest.builder().title(\"Title11\").body(\"Body11\").subtitle(\"Subtitle11\").imageLink(\"https://images2.alphacoders.com/602/thumb-1920-602604.jpg\").build(), user8.getId());\n        commentService.createComment(CreateCommentRequest.builder().body(\"body9\").title(\"title9\").build(), user8.getId(), article8.getId());\n\n        \n\n    }\n       \n}\n", "package com.example.blog_server.common.dtos;\n\nimport lombok.Builder;\nimport lombok.Data;\n\n@Data\n@Builder\npublic class ErrorResponse {\n    private String message;\n}", "package com.example.blog_server.email;\n\n// Importing required classes\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n \n// Annotations\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@Builder\n\npublic class EmailDetails {\n \n    // Class data members\n    private String recipient;\n    private String msgBody;\n    private String subject;\n    private String attachment;\n}", "package com.example.blog_server.email;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.mail.SimpleMailMessage;\nimport org.springframework.mail.javamail.JavaMailSender;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class EmailServiceImpl  {\n \n      \n    @Autowired \n    private JavaMailSender javaMailSender;\n \n    @Value(\"${spring.mail.username}\") \n    private String sender;\n\n    public Boolean sendSimpleEmail(EmailDetails emailDetails){\n        try {\n            SimpleMailMessage mailMessage = new SimpleMailMessage();\n            System.out.println(sender);\n            System.out.println(emailDetails);\n            mailMessage.setFrom(sender);\n            mailMessage.setTo(emailDetails.getRecipient());\n            mailMessage.setText(emailDetails.getMsgBody());\n            mailMessage.setSubject(emailDetails.getSubject());\n\n            System.err.println(mailMessage);\n ", "  mailMessage.setSubject(emailDetails.getSubject());\n\n            System.err.println(mailMessage);\n            javaMailSender.send(mailMessage);\n            System.out.println(\"successfullt mail sent\");\n            return true;\n            \n        } catch (Exception e) {\n            System.out.println(\"failed \"+e);\n            return false;\n\n        }\n    }\n \n\n}", "package com.example.blog_server.security;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.security.config.Customizer;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;\nimport org.springframework.security.config.http.SessionCreationPolicy;\nimport org.springframework.security.web.SecurityFilterChain;\nimport org.springframework.security.web.authentication.AnonymousAuthenticationFilter;\nimport org.springframework.web.servlet.config.annotation.CorsRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\nimport com.example.blog_server.user.UserService;\n\n@Configuration\n@EnableWebSecurity\npublic class AppSecurityConfig", "mple.blog_server.user.UserService;\n\n@Configuration\n@EnableWebSecurity\npublic class AppSecurityConfig {\n\n    private final JWTService jwtService;\n    private final UserService userService;\n\n    public AppSecurityConfig(JWTService jwtService, UserService userService) {\n        this.jwtService = jwtService;\n        this.userService = userService;\n    }\n\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n\n        http.csrf(AbstractHttpConfigurer::disable)\n            .cors(Customizer.withDefaults())  // Enable CORS with default configuration\n            .authorizeHttpRequests(auth -> auth\n                .requestMatchers(HttpMethod.POST, \"/users\", \"/users/login\").permitAll()\n                .requestMatchers(HttpMethod.GET, \"/articles\", \"/articles/*\", \"/h2-console/**\", \"/**\").permitAll()\n                .anyRequest().authenticated())\n            .addFilterBefore(new JWTAuthenticationFilter(new JWTAuthenticationManager(jwtService, userService)),\n      ", "terBefore(new JWTAuthenticationFilter(new JWTAuthenticationManager(jwtService, userService)),\n                             AnonymousAuthenticationFilter.class)\n            .httpBasic(Customizer.withDefaults())\n            .sessionManagement(session -> session\n                .sessionCreationPolicy(SessionCreationPolicy.STATELESS));\n\n        return http.build();\n    }\n\n    @Bean\n    public WebMvcConfigurer corsConfigurer() {\n        return new WebMvcConfigurer() {\n            @Override\n            public void addCorsMappings(CorsRegistry registry) {\n                registry.addMapping(\"/**\")\n                        .allowedOrigins(\"https://blog-client-eight-mauve.vercel.app/\") // Adjust this to your frontend URL\n                        .allowedMethods(\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\")\n                        .allowedHeaders(\"*\")\n                        .allowCredentials(true);\n            }\n        };\n    }\n}\n", "          }\n        };\n    }\n}\n", "package com.example.blog_server.security;\n\nimport java.util.Collection;\n\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.GrantedAuthority;\nimport javax.security.auth.Subject;\n\nimport com.example.blog_server.user.UserEntity;\n\npublic class JWTAuthentication implements Authentication {\n    String jwt;\n    UserEntity userEntity;\n\n    public JWTAuthentication(String jwt) {\n        this.jwt = jwt;\n    }\n\n\n    @Override\n    public Collection<? extends GrantedAuthority> getAuthorities() {\n        return null;\n    }\n\n    /**\n     * Returns the credentials of the {@code Authentication} request.\n     * For eg, the password, or the Bearer token, or the cookie\n     * @return\n     */\n    @Override\n    public String getCredentials() {\n        return jwt;\n    }\n\n    @Override\n    public Object getDetails() {\n        return null;\n    }\n\n    /**\n     * Returns the principal of the {@code Authentication} request.\n     * The \"principal\" is the entity that ", "urns the principal of the {@code Authentication} request.\n     * The \"principal\" is the entity that is being authenticated.\n     * In this case it is the User.\n     * @return\n     */\n    @Override\n    public UserEntity getPrincipal() {\n        return userEntity;\n    }\n\n    @Override\n    public boolean isAuthenticated() {\n        return (userEntity != null);\n    }\n\n    @Override\n    public void setAuthenticated(boolean isAuthenticated) throws IllegalArgumentException {\n    }\n\n    @Override\n    public String getName() {\n        return null;\n    }\n\n    @Override\n    public boolean implies(Subject subject) {\n        return Authentication.super.implies(subject);\n    }\n\n    \n}\n", "package com.example.blog_server.security;\n\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.web.authentication.AuthenticationConverter;\n\nimport jakarta.servlet.http.HttpServletRequest;\n\npublic class JWTAuthenticationConverter implements AuthenticationConverter {\n    \n     @Override\n    public Authentication convert(HttpServletRequest request) {\n\n        var authHeader = request.getHeader(\"Authorization\");\n        if (authHeader == null || !authHeader.startsWith(\"Bearer \")) {\n            return null;\n        }\n\n        var jwt = authHeader.substring(7);\n        return new JWTAuthentication(jwt);\n    }\n    \n}\n", "package com.example.blog_server.security;\n\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.security.web.authentication.AuthenticationFilter;\n\npublic class JWTAuthenticationFilter extends AuthenticationFilter{\n    \n    \n    private JWTAuthenticationManager jwtAuthenticationManager;\n    \n    public JWTAuthenticationFilter(JWTAuthenticationManager jwtAuthenticationManager) {\n        super(jwtAuthenticationManager, new JWTAuthenticationConverter());\n\n        this.setSuccessHandler((request, response, authentication) -> {\n            SecurityContextHolder.getContext().setAuthentication(authentication);\n        });\n    }\n\n}\n", "package com.example.blog_server.security;\n\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.AuthenticationException;\n\nimport com.example.blog_server.user.UserService;\n\npublic class JWTAuthenticationManager implements AuthenticationManager {\n    private JWTService jwtService;\n    private UserService userService;\n\n    public JWTAuthenticationManager(JWTService jwtService, UserService userService){\n        this.jwtService = jwtService;\n        this.userService = userService;\n\n    }\n\n    @Override\n    public Authentication authenticate(Authentication authentication) throws AuthenticationException {\n        if(authentication instanceof JWTAuthentication){\n            var jwtAuthentication = (JWTAuthentication)authentication;\n\n            var jwt = jwtAuthentication.getCredentials();\n            var userId = jwtService.retrieveUserId(jwt);\n            var userEntity = us", "dentials();\n            var userId = jwtService.retrieveUserId(jwt);\n            var userEntity = userService.getUser(userId);\n\n            jwtAuthentication.userEntity = userEntity;\n            jwtAuthentication.setAuthenticated(true);\n\n            return jwtAuthentication;\n        }\n        \n\n        // TODO Auto-generated method stub\n        throw new IllegalAccessError(\"Cannot authenticate with non-JWT authentication\");\n    }\n}\n", "package com.example.blog_server.security;\n\nimport java.util.Date;\n\nimport org.springframework.stereotype.Service;\n\nimport com.auth0.jwt.JWT;\nimport com.auth0.jwt.algorithms.Algorithm;\n\n@Service\npublic class JWTService {\n    private static final String JWT_KEY = \"jh537bkv323ug98dby0aqruboi29g847ty905\";\n    private Algorithm algorithm = Algorithm.HMAC256(JWT_KEY);\n\n    public String createJwt(Long userId){\n        return JWT.create().withSubject(userId.toString())\n                .withIssuedAt(new Date())\n                //.withExpiresAt()\n                .sign(algorithm);\n    }\n\n    public Long retrieveUserId(String jwtString){\n        var decodedJWT = JWT.decode(jwtString);\n        var userId = Long.valueOf(decodedJWT.getSubject());\n        return userId;\n    }\n\n}\n", "package com.example.blog_server.user;\n\nimport java.net.URI;\n\nimport org.modelmapper.ModelMapper;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.CrossOrigin;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport com.example.blog_server.common.dtos.ErrorResponse;\nimport com.example.blog_server.email.EmailDetails;\nimport com.example.blog_server.email.EmailServiceImpl;\nimport com.example.blog_server.security.JWTService;\nimport com.example.blog_server.user.dtos.CreateUserRequest;\nimport com.example.blog_server.user.dtos.LoginUserRequest;\nimport com.example.blog_server.user.dtos.User", "rt com.example.blog_server.user.dtos.LoginUserRequest;\nimport com.example.blog_server.user.dtos.UserResponse;\n\n@RestController\n@RequestMapping(\"/users\")\npublic class UserController {\n    \n    private final UserService userService;\n    private final ModelMapper modelMapper;\n    private final JWTService jwtService;\n    private final EmailServiceImpl emailService;\n\n    public UserController(UserService userService, ModelMapper modelMapper, JWTService jwtService,EmailServiceImpl emailService){\n        this.userService = userService;\n        this.modelMapper = modelMapper;\n        this.jwtService = jwtService;\n        this.emailService = emailService;\n    }\n\n    @PostMapping(\"\")\n    ResponseEntity<UserResponse> signupUser(@RequestBody CreateUserRequest request){\n        UserEntity savedUser = userService.createUser(request);\n        URI savedUserUri = URI.create(\"/users/\"+savedUser.getId());\n        var userResponse = modelMapper.map(savedUser, UserResponse.class);\n        userResponse.setT", "        var userResponse = modelMapper.map(savedUser, UserResponse.class);\n        userResponse.setToken(jwtService.createJwt(savedUser.getId()));\n        EmailDetails e = EmailDetails.builder()\n        .recipient(savedUser.getEmail())\n        .msgBody(\"You have Successfully registered in BlogZeee, \\n\\n\\n\\nhappy writing\")\n        .subject(\"subss\")\n        //.attachment(null)\n        .build();\n\n        emailService.sendSimpleEmail(e);\n        return ResponseEntity.created(savedUserUri).body(userResponse);\n    }   \n\n\n    @PostMapping(\"/login\")\n    ResponseEntity<UserResponse> loginUser(@RequestBody LoginUserRequest request){\n        UserEntity savedUser = userService.loginUser(request.getUsername(), request.getPassword());\n        var userResponse = modelMapper.map(savedUser, UserResponse.class);\n        userResponse.setToken(\n                jwtService.createJwt(savedUser.getId())\n        );\n\n        return ResponseEntity.ok(userResponse);\n    }\n\n    @ExceptionHandler({\n            User", " );\n\n        return ResponseEntity.ok(userResponse);\n    }\n\n    @ExceptionHandler({\n            UserService.UserNotFoundException.class,\n            UserService.InvalidCredentialsException.class\n    })\n    ResponseEntity<ErrorResponse> handleUserExceptions(Exception ex) {\n        String message;\n        HttpStatus status;\n\n        if (ex instanceof UserService.UserNotFoundException) {\n            message = ex.getMessage();\n            status = HttpStatus.NOT_FOUND;\n        } else if (ex instanceof UserService.InvalidCredentialsException) {\n            message = ex.getMessage();\n            status = HttpStatus.UNAUTHORIZED;\n        } else {\n            message = \"Something went wrong\";\n            status = HttpStatus.INTERNAL_SERVER_ERROR;\n        }\n\n         \n        ErrorResponse response = ErrorResponse.builder()\n        .message(message)\n        .build();               \n\n        return ResponseEntity.status(status).body(response);\n    }\n\n    @GetMapping(\"\")\n    ResponseEntity<String", "n ResponseEntity.status(status).body(response);\n    }\n\n    @GetMapping(\"\")\n    ResponseEntity<String> test(){\n        return ResponseEntity.ok(\"success\");\n    }\n}\n", "package com.example.blog_server.user;\n\nimport org.springframework.lang.NonNull;\nimport org.springframework.lang.Nullable;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport lombok.AccessLevel;\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.RequiredArgsConstructor;\nimport lombok.Setter;\nimport lombok.ToString;\n\n@Builder\n@NoArgsConstructor(access = AccessLevel.PROTECTED)\n@AllArgsConstructor\n@RequiredArgsConstructor\n@ToString\n@Getter\n@Setter\n@Entity(name = \"users\")\npublic class UserEntity {\n    @Id\n    @GeneratedValue(strategy = GenerationType.SEQUENCE)\n    @Column(nullable=false)\n    private Long id;\n\n    @Column(nullable = false)\n    @NonNull\n    private String username;\n\n    @Column(nullable = false)\n    @NonNull\n    private String password;\n\n    @Column(nullable = f", ";\n\n    @Column(nullable = false)\n    @NonNull\n    private String password;\n\n    @Column(nullable = false)\n    @NonNull\n    private String email;\n\n    @Column(nullable = true)\n    @Nullable\n    private String bio;\n\n\n    @Column(nullable = true)\n    @Nullable\n    private String image;\n\n}\n", "package com.example.blog_server.user;\n\nimport java.util.Optional;\n\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface UserRepository extends JpaRepository<UserEntity,Long> {\n    Optional<UserEntity> findByUsername(String username);\n}\n", "package com.example.blog_server.user;\n\nimport org.modelmapper.ModelMapper;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.stereotype.Service;\n\nimport com.example.blog_server.user.dtos.CreateUserRequest;\n\n@Service\npublic class UserService {\n\n    private final UserRepository usersRepository;\n    private final ModelMapper modelMapper;\n    private final PasswordEncoder passwordEncoder;\n\n    public UserService(UserRepository usersRepository, ModelMapper modelMapper,PasswordEncoder passwordEncoder) {\n        this.usersRepository = usersRepository;\n        this.modelMapper = modelMapper;\n        this.passwordEncoder = passwordEncoder;\n    }\n\n    public UserEntity createUser(CreateUserRequest u){\n        UserEntity newUser = modelMapper.map(u ,UserEntity.class);\n        newUser.setPassword(passwordEncoder.encode(u.getPassword()));//todo password encoder\n        return usersRepository.save(newUser);\n    }\n\n    public UserEntity getUser(String use", "ncoder\n        return usersRepository.save(newUser);\n    }\n\n    public UserEntity getUser(String username){\n        return usersRepository.findByUsername(username).orElseThrow(()-> new UserNotFoundException(username));\n    }\n\n    public UserEntity getUser(Long userId) {\n        return usersRepository.findById(userId).orElseThrow(() -> new UserNotFoundException(userId));\n    }\n\n    public UserEntity loginUser(String username, String password){\n        var user = usersRepository.findByUsername(username).orElseThrow(() -> new UserNotFoundException(username));\n        var passMatch = passwordEncoder.matches(password, user.getPassword());\n        if(!passMatch) throw new InvalidCredentialsException();\n        return user;\n    }\n\n\n\n    public static class UserNotFoundException extends IllegalArgumentException {\n        public UserNotFoundException(String username) {\n            super(\"User with username: \" + username + \" not found\");\n        }\n\n        public UserNotFoundException(Long userI", "h username: \" + username + \" not found\");\n        }\n\n        public UserNotFoundException(Long userId) {\n            super(\"User with id: \" + userId + \" not found\");\n        }\n    }\n\n    public static class InvalidCredentialsException extends IllegalArgumentException {\n        public InvalidCredentialsException() {\n            super(\"Invalid username or password combination\");\n        }\n    }\n}\n", "package com.example.blog_server.user.dtos;\n\nimport org.springframework.lang.NonNull;\n\nimport lombok.AccessLevel;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.Setter;\n\n@Data\n@Setter(AccessLevel.NONE)\n@Builder\npublic class CreateUserRequest {\n\n    @NonNull\n    private String username;\n\n    @NonNull\n    private String password;\n\n    @NonNull\n    private String email;\n\n}\n", "package com.example.blog_server.user.dtos;\n\nimport org.springframework.lang.NonNull;\n\nimport lombok.AccessLevel;\nimport lombok.Data;\nimport lombok.Setter;\n\n@Data\n@Setter(AccessLevel.NONE)\npublic class LoginUserRequest {\n    @NonNull\n    private String username;\n    @NonNull\n    private String password;\n}", "package com.example.blog_server.user.dtos;\n\nimport lombok.Data;\n\n@Data\npublic class UserResponse {\n    private Long id;\n    private String username;\n    private String email;\n    private String bio;\n    private String image;\n    private String token;\n}", "package com.example.blog_server;\n\nimport org.modelmapper.ModelMapper;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\n\n@SpringBootApplication\npublic class BlogServerApplication {\n\n\t\n\n\t@Bean\n    public ModelMapper modelMapper() {\n        return new ModelMapper();\n    }\n\n\t@Bean\n\tpublic PasswordEncoder PasswordEncoder(){\n\t\treturn new BCryptPasswordEncoder();\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(BlogServerApplication.class, args);\n\t}\n \n}\n", "package com.example.blog_server.article;\n\nimport java.net.URI;\nimport java.util.Optional;\n\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.security.core.annotation.AuthenticationPrincipal;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.PutMapping;\nimport org.springframework.web.bind.annotation.DeleteMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestHeader;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.servlet.support.ServletUriComponentsBuilder;\n\nimport com.example.blog_server.article.dtos.CreateArticleRequest;\nimport com.example.blog_server.article.dtos.Upda", "mple.blog_server.article.dtos.CreateArticleRequest;\nimport com.example.blog_server.article.dtos.UpdateArticleRequest;\nimport com.example.blog_server.security.JWTService;\nimport com.example.blog_server.user.UserEntity;\n\n@RestController\n@RequestMapping(\"/articles\")\npublic class ArticleController {\n\n    private final ArticleService articleService;\n    private final JWTService jwtService;\n    public ArticleController(ArticleService articleService, JWTService jwtService) {\n        this.articleService = articleService;\n        this.jwtService = jwtService;\n    }\n\n    @GetMapping(\"\")\n    public ResponseEntity<Iterable<ArticleEntity>> getAllArticles() {\n        try {\n            Iterable<ArticleEntity> articles = articleService.getAllArticle();\n            return ResponseEntity.ok(articles);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n                    .body(null);\n        }\n    }\n\n    @GetMapping", "(HttpStatus.INTERNAL_SERVER_ERROR)\n                    .body(null);\n        }\n    }\n\n    @GetMapping(\"/{id}\")\n    public ResponseEntity<ArticleEntity> getArticleById(@PathVariable(\"id\") Long id) {\n        try {\n            ArticleEntity article = articleService.getArticleById(id).get(); // Assuming ID can be slug, otherwise\n                                                                             // adjust this\n            return ResponseEntity.ok(article);\n        } catch (ArticleService.ArticleNotFoundException e) {\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n                    .body(null);\n        }\n    }\n\n    @PostMapping(\"\")\n    public ResponseEntity<?> createArticle(@AuthenticationPrincipal UserEntity user,\n            @RequestBody CreateArticleRequest article) {\n        try {\n            if (article.getTitl", "          @RequestBody CreateArticleRequest article) {\n        try {\n            if (article.getTitle() != null && article.getBody() != null) {\n                ArticleEntity createdArticle = articleService.createArticle(article, user.getId());\n                URI location = ServletUriComponentsBuilder.fromCurrentRequest()\n                        .path(\"/{id}\")\n                        .buildAndExpand(createdArticle.getId())\n                        .toUri();\n                return ResponseEntity.created(location).body(createdArticle);\n            } else {\n                return ResponseEntity.badRequest().body(\"Title and body must not be null\");\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n                    .body(\"An error occurred while creating the article\");\n        }\n    }\n\n    @PutMapping(\"/{id}\")\n    public ResponseEntity<?> updateArticle(@PathVariable(\"id\") Long articleId", "  @PutMapping(\"/{id}\")\n    public ResponseEntity<?> updateArticle(@PathVariable(\"id\") Long articleId,\n                                           @RequestBody UpdateArticleRequest articleRequest,\n                                           @RequestHeader(\"Authorization\") String authHeader) {\n        try {\n            // Extract the JWT token and retrieve the userId\n            String token = authHeader.replace(\"Bearer \", \"\");\n            Long userId = jwtService.retrieveUserId(token);\n\n            // Call the update service method with the userId\n            ArticleEntity updatedArticle = articleService.updateArticle(articleId, articleRequest, userId);\n\n            return ResponseEntity.ok(updatedArticle);\n        } catch (ArticleService.UnauthorizedException e) {\n            return ResponseEntity.status(HttpStatus.FORBIDDEN).body(e.getMessage());\n        } catch (ArticleService.ArticleNotFoundException e) {\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage", "FoundException e) {\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage());\n        } catch (Exception e) {\n            e.printStackTrace();\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n                    .body(\"An error occurred while updating the article\");\n        }\n    }\n\n    @DeleteMapping(\"/{id}\")\n    public ResponseEntity<?> deleteArticle(@PathVariable(\"id\") Long id) {\n        try {\n            articleService.deleteArticle(id);\n            return ResponseEntity.noContent().build();\n        } catch (ArticleService.ArticleNotFoundException e) {\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(\"Article not found\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n                    .body(\"An error occurred while deleting the article\");\n        }\n    }\n    \n}\n", "eting the article\");\n        }\n    }\n    \n}\n", "package com.example.blog_server.article;\n\nimport org.springframework.lang.NonNull;\n\nimport com.example.blog_server.user.UserEntity;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.JoinColumn;\nimport jakarta.persistence.ManyToOne;\nimport lombok.AccessLevel;\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.RequiredArgsConstructor;\nimport lombok.Setter;\nimport lombok.ToString;\n\n\n@Entity(name = \"articles\")\n@Getter\n@Setter\n@ToString\n@Builder\n@RequiredArgsConstructor\n@AllArgsConstructor\n@NoArgsConstructor(access = AccessLevel.PROTECTED)\npublic class ArticleEntity {\n    \n    @Id\n    @GeneratedValue(strategy = GenerationType.SEQUENCE)\n    @Column(nullable = false)\n    private Long id;\n\n\n    @NonNull\n    private String title;\n\n    @NonNull\n    @Column(uni", "= false)\n    private Long id;\n\n\n    @NonNull\n    private String title;\n\n    @NonNull\n    @Column(unique = true)\n    private String slug;\n\n    @NonNull\n    private String subtitle;\n\n    @NonNull\n    @Column(length = 65535)\n    private String body;\n\n    private String createdAt;\n\n\n    @Column(length = 65535)\n    private String imageLink;\n\n    @ManyToOne\n    @JoinColumn(name = \"authorId\", nullable = false)\n    private UserEntity author;\n    \n}\n", "package com.example.blog_server.article;\n\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface ArticleRepository extends JpaRepository<ArticleEntity, Long>{\n    ArticleEntity findBySlug(String slug);\n}\n", "package com.example.blog_server.article;\n\nimport java.util.Optional;\n\nimport org.springframework.stereotype.Service;\n\nimport com.example.blog_server.article.dtos.CreateArticleRequest;\nimport com.example.blog_server.article.dtos.UpdateArticleRequest;\nimport com.example.blog_server.comments.CommentService;\nimport com.example.blog_server.user.UserRepository;\nimport com.example.blog_server.user.UserService;\n\nimport jakarta.transaction.Transactional;\n\n@Service\npublic class ArticleService {\n    private final ArticleRepository articleRepository;\n    private final UserRepository userRepository;\n    private final CommentService commentService;\n\n    public ArticleService(ArticleRepository articleRepository, UserRepository userRepository,\n        CommentService commentService) {\n        this.articleRepository = articleRepository;\n        this.userRepository = userRepository;\n        this.commentService = commentService; // Initialize CommentService\n    }\n\n    public Iterable<ArticleEntity> getAll", "vice = commentService; // Initialize CommentService\n    }\n\n    public Iterable<ArticleEntity> getAllArticle() {\n        return articleRepository.findAll();\n    }\n\n    public ArticleEntity getArticleBySlug(String slug) {\n        var article = articleRepository.findBySlug(slug);\n        if (article == null) {\n            throw new ArticleNotFoundException(slug);\n        }\n        return article;\n    }\n\n    public ArticleEntity createArticle(CreateArticleRequest a, Long authorId) {\n        var author = userRepository.findById(authorId)\n                .orElseThrow(() -> new UserService.UserNotFoundException(authorId));\n        return articleRepository.save(ArticleEntity.builder()\n                .title(a.getTitle())\n                .slug(a.getTitle().toLowerCase().replaceAll(\"\\\\s+\", \"-\"))\n                .body(a.getBody())\n                .subtitle(a.getSubtitle())\n                .imageLink(a.getImageLink())\n                .author(author)\n                .build());\n    }\n\n    public Art", "k(a.getImageLink())\n                .author(author)\n                .build());\n    }\n\n    public ArticleEntity updateArticle(Long articleId, UpdateArticleRequest a, Long userId) {\n        var article = articleRepository.findById(articleId).orElseThrow(() -> new ArticleNotFoundException(articleId));\n\n        if (!article.getAuthor().getId().equals(userId)) {\n            throw new UnauthorizedException(\"You are not authorized to update this article\");\n        }\n\n        if (a.getTitle() != null) {\n            article.setTitle(a.getTitle());\n            article.setSlug(a.getTitle().toLowerCase().replaceAll(\"\\\\s+\", \"-\"));\n\n        }\n\n        if (a.getBody() != null) {\n            article.setBody(a.getBody());\n\n        }\n\n        if (a.getSubtitle() != null) {\n            article.setSubtitle(a.getSubtitle());\n\n        }\n\n        if (a.getImageLink() != null) {\n            article.setImageLink(a.getImageLink());\n        }\n\n        return articleRepository.save(article);\n\n    }\n\n    static cl", "(a.getImageLink());\n        }\n\n        return articleRepository.save(article);\n\n    }\n\n    static class UnauthorizedException extends RuntimeException {\n        public UnauthorizedException(String message) {\n            super(message);\n        }\n    }\n\n    public static class ArticleNotFoundException extends IllegalArgumentException {\n        public ArticleNotFoundException(String slug) {\n            super(\"Article \" + slug + \" not found\");\n        }\n\n        public ArticleNotFoundException(Long id) {\n            super(\"Article with id: \" + id + \" not found\");\n        }\n    }\n\n    public Optional<ArticleEntity> getArticleById(Long id) {\n        // TODO Auto-generated method stub\n        var article = articleRepository.findById(id);\n        if (article == null) {\n            throw new ArticleNotFoundException(id);\n        }\n        return article;\n    }\n\n    @Transactional\n    public void deleteArticle(Long id) {\n        if (articleRepository.existsById(id)) {\n            // Delete all ", " deleteArticle(Long id) {\n        if (articleRepository.existsById(id)) {\n            // Delete all comments associated with the article\n            commentService.deleteAllByArticleId(id);\n            \n            // Delete the article\n            articleRepository.deleteById(id);\n        } else {\n            throw new ArticleNotFoundException(id); // Custom exception if article not found\n        }\n    }\n}\n", "package com.example.blog_server.article.dtos;\n\nimport lombok.AccessLevel;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NonNull;\nimport lombok.Setter;\nimport org.springframework.lang.Nullable;\n\n@Data\n@Setter(AccessLevel.NONE)\n@Builder\npublic class CreateArticleRequest {\n    @NonNull\n    private String title;\n    @NonNull\n    private String body;\n    @Nullable\n    private String subtitle;\n    @Nullable\n    private String imageLink;\n}", "package com.example.blog_server.article.dtos;\n\nimport org.springframework.lang.Nullable;\n\nimport lombok.AccessLevel;\nimport lombok.Data;\nimport lombok.Setter;\n\n@Data\n@Setter(AccessLevel.NONE)\npublic class UpdateArticleRequest {\n    @Nullable\n    private String title;\n    @Nullable\n    private String body;\n    @Nullable\n    private String subtitle;\n    @Nullable\n    private String imageLink;\n\n}", "package com.example.blog_server.comments;\n\nimport java.util.Date;\n\nimport org.springframework.data.annotation.CreatedDate;\nimport jakarta.persistence.Id;\nimport org.springframework.lang.Nullable;\n\nimport com.example.blog_server.article.ArticleEntity;\nimport com.example.blog_server.user.UserEntity;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.JoinColumn;\nimport jakarta.persistence.ManyToOne;\nimport lombok.AccessLevel;\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.NonNull;\nimport lombok.RequiredArgsConstructor;\nimport lombok.Setter;\nimport lombok.ToString;\n\n@Entity(name = \"comments\")\n@Getter\n@Setter\n@ToString\n@Builder\n@RequiredArgsConstructor\n@AllArgsConstructor\n@NoArgsConstructor(access = AccessLevel.PROTECTED)\npublic class CommentEntity {\n    @Id\n    @GeneratedValue(stra", "ructor(access = AccessLevel.PROTECTED)\npublic class CommentEntity {\n    @Id\n    @GeneratedValue(strategy = GenerationType.SEQUENCE)\n    @Column(nullable = false)\n    private Long id;\n\n    @Nullable\n    private String title;\n\n    @Column(length = 65535)\n    @NonNull\n    private String body;\n\n    @CreatedDate\n    private Date createdAt;\n\n    @ManyToOne\n    @JoinColumn(name = \"articleId\", nullable = false)\n    private ArticleEntity article;\n\n    @ManyToOne\n    @JoinColumn(name = \"authorId\", nullable = false)\n    private UserEntity author;\n\n\n}", "package com.example.blog_server.comments;\n\nimport java.util.List;\n\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface CommentRepository extends JpaRepository<CommentEntity, Long> {\n    List<CommentEntity> findAllByArticleId(Long articleId);\n    void deleteAllByArticleId(Long articleId);\n}\n", "package com.example.blog_server.comments;\n\nimport org.springframework.web.bind.annotation.*;\nimport com.example.blog_server.article.ArticleService;\nimport com.example.blog_server.comments.dtos.CreateCommentRequest;\nimport com.example.blog_server.security.JWTService;\n\n@RestController\n@RequestMapping(\"/articles/{articleSlug}/comments\")\npublic class CommentsController {\n\n    private final CommentService commentService;\n    private final ArticleService articleService;\n\n    private final JWTService jwtService;\n\n    public CommentsController(CommentService commentService, ArticleService articleService, JWTService jwtService) {\n        this.commentService = commentService;\n        this.articleService = articleService;\n        this.jwtService = jwtService;\n    }\n\n\n\n    @GetMapping\n    public Iterable<CommentEntity> getCommentsByArticleSlug(@PathVariable(\"articleSlug\") String articleSlug) {\n        // Get the article by slug\n        var article = articleService.getArticleBySlug(articleSlug);\n  ", "   // Get the article by slug\n        var article = articleService.getArticleBySlug(articleSlug);\n        // Fetch comments for the article\n        return commentService.getCommentsByArticle(article.getId());\n    }\n\n    @PostMapping\n    public CommentEntity createComment(@PathVariable(\"articleSlug\") String articleSlug,\n                                       @RequestBody CreateCommentRequest request,\n                                       @RequestHeader(\"Authorization\") String token) {\n        // Extract userId from JWT token\n        Long userId = extractUserIdFromToken(token);\n        // Get the article by slug\n        var article = articleService.getArticleBySlug(articleSlug);\n        // Create and return the new comment\n        return commentService.createComment(request, userId, article.getId());\n    }\n\n    @DeleteMapping(\"/{commentId}\")\n    public void deleteComment(@PathVariable(\"articleSlug\") String articleSlug,\n                              @PathVariable(\"commentId\") Long commen", "ticleSlug\") String articleSlug,\n                              @PathVariable(\"commentId\") Long commentId,\n                              @RequestHeader(\"Authorization\") String token) {\n        // Extract userId from JWT token\n        Long userId = extractUserIdFromToken(token);\n        // Delete the comment\n        commentService.deleteComment(commentId, userId);\n    }\n\n    private Long extractUserIdFromToken(String token) {\n        // Assuming the JWT token starts with \"Bearer \"\n        String jwtToken = token.substring(7);\n        return jwtService.retrieveUserId(jwtToken);\n    }\n\n    \n}\n", "package com.example.blog_server.comments;\n\nimport java.util.Optional;\n\nimport org.springframework.stereotype.Service;\n\nimport com.example.blog_server.article.ArticleEntity;\nimport com.example.blog_server.article.ArticleRepository;\nimport com.example.blog_server.article.ArticleService;\nimport com.example.blog_server.comments.dtos.CreateCommentRequest;\nimport com.example.blog_server.user.UserRepository;\nimport com.example.blog_server.user.UserService;\n\n@Service\npublic class CommentService {\n    private final CommentRepository commentRepository;\n    private final ArticleRepository articleRepository;\n    private final UserRepository userRepository;\n\n    public CommentService(CommentRepository commentRepository, ArticleRepository articleRepository, UserRepository userRepository) {\n        this.commentRepository = commentRepository;\n        this.articleRepository = articleRepository;\n        this.userRepository = userRepository;\n    }\n\n    public Iterable<CommentEntity> getCommentsByArticle(", "his.userRepository = userRepository;\n    }\n\n    public Iterable<CommentEntity> getCommentsByArticle(Long articleId) {\n        return commentRepository.findAllByArticleId(articleId);\n    }\n\n    public CommentEntity createComment(CreateCommentRequest request, Long authorId, Long articleId) {\n        var article = articleRepository.findById(articleId)\n                .orElseThrow(() -> new ArticleService.ArticleNotFoundException(articleId));\n\n        var author = userRepository.findById(authorId)\n                .orElseThrow(() -> new UserService.UserNotFoundException(authorId));\n\n        var comment = CommentEntity.builder()\n                .body(request.getBody())\n                .title(request.getTitle())\n                .article(article)\n                .author(author)\n                .build();\n\n        return commentRepository.save(comment);\n    }\n\n    public void deleteComment(Long commentId, Long userId) {\n        var comment = commentRepository.findById(commentId)\n                ", "mmentId, Long userId) {\n        var comment = commentRepository.findById(commentId)\n                .orElseThrow(() -> new CommentNotFoundException(commentId));\n\n        if (!comment.getAuthor().getId().equals(userId)) {\n            throw new UnauthorizedException(\"You are not authorized to delete this comment\");\n        }\n\n        commentRepository.deleteById(commentId);\n    }\n    \n    public void deleteAllByArticleId(Long articleId) {\n        commentRepository.deleteAllByArticleId(articleId);\n    }\n\n    static class UnauthorizedException extends RuntimeException {\n        public UnauthorizedException(String message) {\n            super(message);\n        }\n    }\n\n    static class CommentNotFoundException extends IllegalArgumentException {\n        public CommentNotFoundException(Long id) {\n            super(\"Comment with id: \" + id + \" not found\");\n        }\n    }\n}\n", "package com.example.blog_server.comments.dtos;\n\nimport lombok.Builder;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\n@Builder\npublic class CreateCommentRequest {\n    private String title;\n    private String body;\n}\n", "package com.example.blog_server.common;\n\nimport org.springframework.stereotype.Component;\n\nimport com.example.blog_server.article.ArticleService;\nimport com.example.blog_server.article.dtos.CreateArticleRequest;\nimport com.example.blog_server.comments.CommentService;\nimport com.example.blog_server.comments.dtos.CreateCommentRequest;\nimport com.example.blog_server.user.UserService;\nimport com.example.blog_server.user.dtos.CreateUserRequest;\n\n@Component\npublic class SeedData {\n    UserService userService;\n    ArticleService articleService;\n    CommentService commentService;\n\n    public SeedData(UserService userService, ArticleService articleService, CommentService commentService) {\n        System.out.println(\"########################Seeding Data#########################\");\n        this.userService = userService;\n        this.articleService = articleService;\n        this.commentService = commentService;\n\n        createUsers();\n        createArticles();\n        createComments();\n    }\n\n   ", "mmentService;\n\n        createUsers();\n        createArticles();\n        createComments();\n    }\n\n    public void createUsers(){\n        userService.createUser(CreateUserRequest.builder().username(\"siddharth\").password(\"Sid@1234\").email(\"siddharth@gmail.com\").build());\n        userService.createUser(CreateUserRequest.builder().username(\"siddharth1\").password(\"Sid@1234\").email(\"siddharth1@gmail.com\").build());\n        userService.createUser(CreateUserRequest.builder().username(\"siddharth2\").password(\"Sid@1234\").email(\"siddharth2@gmail.com\").build());\n        userService.createUser(CreateUserRequest.builder().username(\"siddharth3\").password(\"Sid@1234\").email(\"siddharth3@gmail.com\").build());\n    }\n\n\n    public void createArticles(){\n\n        var user = userService.getUser(\"siddharth\");\n        var user1 = userService.getUser(\"siddharth1\");\n        var user2 = userService.getUser(\"siddharth2\");\n        var user3 = userService.getUser(\"siddharth3\");\n        articleService.createArticle(Crea", "\");\n        var user3 = userService.getUser(\"siddharth3\");\n        articleService.createArticle(CreateArticleRequest.builder().title(\"Title1\").body(\"<ul>\\n\" + //\n                        \"        <li>The Moon is Earth's only natural satellite and the fifth-largest moon in the Solar System.</li>\\n\" + //\n                        \"        <li>It is about 384,400 km (238,855 miles) away from Earth.</li>\\n\" + //\n                        \"        <li>The Moon has a diameter of 3,474 km (2,159 miles), about one-quarter the size of Earth.</li>\\n\" + //\n                        \"        <li>It takes approximately 27.3 days for the Moon to orbit Earth, known as a sidereal month.</li>\\n\" + //\n                        \"        <li>The Moon's surface is covered in craters, valleys, and flat plains called maria.</li>\\n\" + //\n                        \"        <li>The far side of the Moon, often mistakenly called the \\\"dark side,\\\" is never visible from Earth.</li>\\n\" + //\n                        \"        <l", "led the \\\"dark side,\\\" is never visible from Earth.</li>\\n\" + //\n                        \"        <li>The Moon has a very thin atmosphere called an exosphere, which does not support life.</li>\\n\" + //\n                        \"        <li>The Moon influences Earth's tides due to its gravitational pull.</li>\\n\" + //\n                        \"        <li>It experiences extreme temperature variations, ranging from -173\u00b0C (-280\u00b0F) at night to 127\u00b0C (260\u00b0F) during the day.</li>\\n\" + //\n                        \"        <li>The Moon has no water in liquid form, but water ice has been found in permanently shadowed craters.</li>\\n\" + //\n                        \"        <li>The Moon's gravitational pull is about one-sixth that of Earth's, making objects weigh less.</li>\\n\" + //\n                        \"        <li>During a lunar eclipse, the Earth comes between the Sun and the Moon, casting a shadow on the Moon.</li>\\n\" + //\n                        \"        <li>The Moon's phases, such as new moon,", " on the Moon.</li>\\n\" + //\n                        \"        <li>The Moon's phases, such as new moon, full moon, and crescent, are caused by its position relative to Earth and the Sun.</li>\\n\" + //\n                        \"        <li>Neil Armstrong and Buzz Aldrin were the first humans to land on the Moon on July 20, 1969, during NASA's Apollo 11 mission.</li>\\n\" + //\n                        \"        <li>The Moon is slowly drifting away from Earth at a rate of about 3.8 cm (1.5 inches) per year.</li>\\n\" + //\n                        \"        <li>The Moon has no magnetic field, unlike Earth.</li>\\n\" + //\n                        \"        <li>It is believed that the Moon was formed about 4.5 billion years ago, possibly from debris left after a collision between Earth and a Mars-sized object.</li>\\n\" + //\n                        \"        <li>The largest crater on the Moon is the South Pole-Aitken Basin, which is about 2,500 km (1,550 miles) in diameter.</li>\\n\" + //\n                        ", "tken Basin, which is about 2,500 km (1,550 miles) in diameter.</li>\\n\" + //\n                        \"        <li>The Moon's surface is covered in fine dust and rocky debris known as regolith.</li>\\n\" + //\n                        \"        <li>Future space missions, like NASA's Artemis program, aim to return humans to the Moon and establish a sustainable presence.</li>\\n\" + //\n                        \"    </ul>\").subtitle(\"Subtitle1\").imageLink(\"https://wallpapercave.com/wp/GpUHmC4.jpg\").build(), user.getId());\n        articleService.createArticle(CreateArticleRequest.builder().title(\"Title2\").body(\"Body2\").subtitle(\"Subtitle2\").imageLink(\"https://wallpapercave.com/wp/Dvslduk.jpg\").build(), user1.getId());\n        articleService.createArticle(CreateArticleRequest.builder().title(\"Title3\").body(\"Body3\").subtitle(\"Subtitle3\").imageLink(\"https://wallpapercave.com/uwp/uwp4211601.png\").build(), user2.getId());\n        articleService.createArticle(CreateArticleRequest.builder().title(\"Title4\")", " user2.getId());\n        articleService.createArticle(CreateArticleRequest.builder().title(\"Title4\").body(\"Body4\").subtitle(\"Subtitle4\").imageLink(\"https://wallpapercave.com/wp/wp4096172.jpg\").build(), user3.getId());\n        articleService.createArticle(CreateArticleRequest.builder().title(\"Title5\").body(\"Body5\").subtitle(\"Subtitle5\").imageLink(\"https://images2.alphacoders.com/602/thumb-1920-602604.jpg\").build(), user2.getId());\n        articleService.createArticle(CreateArticleRequest.builder().title(\"Title6\").body(\"Body6\").subtitle(\"Subtitle6\").imageLink(\"https://images6.alphacoders.com/133/thumb-1920-1339623.png\").build(), user.getId());\n    }\n\n\n    public void createComments(){\n\n        var user = userService.getUser(\"siddharth\");\n        var user1 = userService.getUser(\"siddharth1\");\n        var user2 = userService.getUser(\"siddharth2\");\n        var user3 = userService.getUser(\"siddharth3\");\n        var article = articleService.getArticleBySlug(\"title1\");\n        var article1 = a", "dharth3\");\n        var article = articleService.getArticleBySlug(\"title1\");\n        var article1 = articleService.getArticleBySlug(\"title2\");\n        var article2 = articleService.getArticleBySlug(\"title3\");  \n        var article3 = articleService.getArticleBySlug(\"title4\");\n        commentService.createComment(CreateCommentRequest.builder().body(\"body1\").title(\"title1\").build(), user.getId(), article.getId());\n        commentService.createComment(CreateCommentRequest.builder().body(\"body2\").title(\"title2\").build(), user1.getId(), article1.getId());\n        commentService.createComment(CreateCommentRequest.builder().body(\"body3\").title(\"title3\").build(), user2.getId(), article2.getId());\n        commentService.createComment(CreateCommentRequest.builder().body(\"body4\").title(\"title4\").build(), user3.getId(), article3.getId());\n\n        var user4 = userService.createUser(CreateUserRequest.builder().username(\"siddharth4\").password(\"Sid@1234\").email(\"siddharth4@gmail.com\").build());\n      ", "builder().username(\"siddharth4\").password(\"Sid@1234\").email(\"siddharth4@gmail.com\").build());\n        var article4 = articleService.createArticle(CreateArticleRequest.builder().title(\"Title7\").body(\"Body7\").subtitle(\"Subtitle7\").imageLink(\"https://images5.alphacoders.com/602/thumb-1920-602604.jpg\").build(), user4.getId());\n        commentService.createComment(CreateCommentRequest.builder().body(\"body5\").title(\"title5\").build(), user4.getId(), article4.getId());\n        \n        var user5 = userService.createUser(CreateUserRequest.builder().username(\"siddharth5\").password(\"Sid@1234\").email(\"siddharth5@gmail.com\").build());\n        var article5 = articleService.createArticle(CreateArticleRequest.builder().title(\"Title8\").body(\"Body8\").subtitle(\"Subtitle8\").imageLink(\"https://images2.alphacoders.com/602/thumb-1920-602604.jpg\").build(), user5.getId());\n        commentService.createComment(CreateCommentRequest.builder().body(\"body6\").title(\"title6\").build(), user5.getId(), article5.getId())", "eateCommentRequest.builder().body(\"body6\").title(\"title6\").build(), user5.getId(), article5.getId());\n\n        var user6 = userService.createUser(CreateUserRequest.builder().username(\"siddharth6\").password(\"Sid@1234\").email(\"siddharth6@gmail.com\").build());\n        var article6 = articleService.createArticle(CreateArticleRequest.builder().title(\"Title9\").body(\"Body9\").subtitle(\"Subtitle9\").imageLink(\"https://images6.alphacoders.com/133/thumb-1920-1339623.png\").build(), user6.getId());\n        commentService.createComment(CreateCommentRequest.builder().body(\"body7\").title(\"title7\").build(), user6.getId(), article6.getId());\n\n        var user7 = userService.createUser(CreateUserRequest.builder().username(\"siddharth7\").password(\"Sid@1234\").email(\"siddharth7@gmail.com\").build());\n        var article7 = articleService.createArticle(CreateArticleRequest.builder().title(\"Title10\").body(\"Body10\").subtitle(\"Subtitle10\").imageLink(\"https://images5.alphacoders.com/602/thumb-1920-602604.jpg\").buil", ").subtitle(\"Subtitle10\").imageLink(\"https://images5.alphacoders.com/602/thumb-1920-602604.jpg\").build(), user7.getId());\n        commentService.createComment(CreateCommentRequest.builder().body(\"body8\").title(\"title8\").build(), user7.getId(), article7.getId());\n\n        var user8 = userService.createUser(CreateUserRequest.builder().username(\"siddharth8\").password(\"Sid@1234\").email(\"siddharth8@gmail.com\").build());\n        var article8 = articleService.createArticle(CreateArticleRequest.builder().title(\"Title11\").body(\"Body11\").subtitle(\"Subtitle11\").imageLink(\"https://images2.alphacoders.com/602/thumb-1920-602604.jpg\").build(), user8.getId());\n        commentService.createComment(CreateCommentRequest.builder().body(\"body9\").title(\"title9\").build(), user8.getId(), article8.getId());\n\n        \n\n    }\n       \n}\n", "package com.example.blog_server.common.dtos;\n\nimport lombok.Builder;\nimport lombok.Data;\n\n@Data\n@Builder\npublic class ErrorResponse {\n    private String message;\n}", "package com.example.blog_server.email;\n\n// Importing required classes\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n \n// Annotations\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@Builder\n\npublic class EmailDetails {\n \n    // Class data members\n    private String recipient;\n    private String msgBody;\n    private String subject;\n    private String attachment;\n}", "package com.example.blog_server.email;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.mail.SimpleMailMessage;\nimport org.springframework.mail.javamail.JavaMailSender;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class EmailServiceImpl  {\n \n      \n    @Autowired \n    private JavaMailSender javaMailSender;\n \n    @Value(\"${spring.mail.username}\") \n    private String sender;\n\n    public Boolean sendSimpleEmail(EmailDetails emailDetails){\n        try {\n            SimpleMailMessage mailMessage = new SimpleMailMessage();\n            System.out.println(sender);\n            System.out.println(emailDetails);\n            mailMessage.setFrom(sender);\n            mailMessage.setTo(emailDetails.getRecipient());\n            mailMessage.setText(emailDetails.getMsgBody());\n            mailMessage.setSubject(emailDetails.getSubject());\n\n            System.err.println(mailMessage);\n ", "  mailMessage.setSubject(emailDetails.getSubject());\n\n            System.err.println(mailMessage);\n            javaMailSender.send(mailMessage);\n            System.out.println(\"successfullt mail sent\");\n            return true;\n            \n        } catch (Exception e) {\n            System.out.println(\"failed \"+e);\n            return false;\n\n        }\n    }\n \n\n}", "package com.example.blog_server.security;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.security.config.Customizer;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;\nimport org.springframework.security.config.http.SessionCreationPolicy;\nimport org.springframework.security.web.SecurityFilterChain;\nimport org.springframework.security.web.authentication.AnonymousAuthenticationFilter;\nimport org.springframework.web.servlet.config.annotation.CorsRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\nimport com.example.blog_server.user.UserService;\n\n@Configuration\n@EnableWebSecurity\npublic class AppSecurityConfig", "mple.blog_server.user.UserService;\n\n@Configuration\n@EnableWebSecurity\npublic class AppSecurityConfig {\n\n    private final JWTService jwtService;\n    private final UserService userService;\n\n    public AppSecurityConfig(JWTService jwtService, UserService userService) {\n        this.jwtService = jwtService;\n        this.userService = userService;\n    }\n\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n\n        http.csrf(AbstractHttpConfigurer::disable)\n            .cors(Customizer.withDefaults())  // Enable CORS with default configuration\n            .authorizeHttpRequests(auth -> auth\n                .requestMatchers(HttpMethod.POST, \"/users\", \"/users/login\").permitAll()\n                .requestMatchers(HttpMethod.GET, \"/articles\", \"/articles/*\", \"/h2-console/**\", \"/**\").permitAll()\n                .anyRequest().authenticated())\n            .addFilterBefore(new JWTAuthenticationFilter(new JWTAuthenticationManager(jwtService, userService)),\n      ", "terBefore(new JWTAuthenticationFilter(new JWTAuthenticationManager(jwtService, userService)),\n                             AnonymousAuthenticationFilter.class)\n            .httpBasic(Customizer.withDefaults())\n            .sessionManagement(session -> session\n                .sessionCreationPolicy(SessionCreationPolicy.STATELESS));\n\n        return http.build();\n    }\n\n    @Bean\n    public WebMvcConfigurer corsConfigurer() {\n        return new WebMvcConfigurer() {\n            @Override\n            public void addCorsMappings(CorsRegistry registry) {\n                registry.addMapping(\"/**\")\n                        .allowedOrigins(\"https://blog-client-eight-mauve.vercel.app/\") // Adjust this to your frontend URL\n                        .allowedMethods(\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\")\n                        .allowedHeaders(\"*\")\n                        .allowCredentials(true);\n            }\n        };\n    }\n}\n", "          }\n        };\n    }\n}\n", "package com.example.blog_server.security;\n\nimport java.util.Collection;\n\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.GrantedAuthority;\nimport javax.security.auth.Subject;\n\nimport com.example.blog_server.user.UserEntity;\n\npublic class JWTAuthentication implements Authentication {\n    String jwt;\n    UserEntity userEntity;\n\n    public JWTAuthentication(String jwt) {\n        this.jwt = jwt;\n    }\n\n\n    @Override\n    public Collection<? extends GrantedAuthority> getAuthorities() {\n        return null;\n    }\n\n    /**\n     * Returns the credentials of the {@code Authentication} request.\n     * For eg, the password, or the Bearer token, or the cookie\n     * @return\n     */\n    @Override\n    public String getCredentials() {\n        return jwt;\n    }\n\n    @Override\n    public Object getDetails() {\n        return null;\n    }\n\n    /**\n     * Returns the principal of the {@code Authentication} request.\n     * The \"principal\" is the entity that ", "urns the principal of the {@code Authentication} request.\n     * The \"principal\" is the entity that is being authenticated.\n     * In this case it is the User.\n     * @return\n     */\n    @Override\n    public UserEntity getPrincipal() {\n        return userEntity;\n    }\n\n    @Override\n    public boolean isAuthenticated() {\n        return (userEntity != null);\n    }\n\n    @Override\n    public void setAuthenticated(boolean isAuthenticated) throws IllegalArgumentException {\n    }\n\n    @Override\n    public String getName() {\n        return null;\n    }\n\n    @Override\n    public boolean implies(Subject subject) {\n        return Authentication.super.implies(subject);\n    }\n\n    \n}\n", "package com.example.blog_server.security;\n\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.web.authentication.AuthenticationConverter;\n\nimport jakarta.servlet.http.HttpServletRequest;\n\npublic class JWTAuthenticationConverter implements AuthenticationConverter {\n    \n     @Override\n    public Authentication convert(HttpServletRequest request) {\n\n        var authHeader = request.getHeader(\"Authorization\");\n        if (authHeader == null || !authHeader.startsWith(\"Bearer \")) {\n            return null;\n        }\n\n        var jwt = authHeader.substring(7);\n        return new JWTAuthentication(jwt);\n    }\n    \n}\n", "package com.example.blog_server.security;\n\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.security.web.authentication.AuthenticationFilter;\n\npublic class JWTAuthenticationFilter extends AuthenticationFilter{\n    \n    \n    private JWTAuthenticationManager jwtAuthenticationManager;\n    \n    public JWTAuthenticationFilter(JWTAuthenticationManager jwtAuthenticationManager) {\n        super(jwtAuthenticationManager, new JWTAuthenticationConverter());\n\n        this.setSuccessHandler((request, response, authentication) -> {\n            SecurityContextHolder.getContext().setAuthentication(authentication);\n        });\n    }\n\n}\n", "package com.example.blog_server.security;\n\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.AuthenticationException;\n\nimport com.example.blog_server.user.UserService;\n\npublic class JWTAuthenticationManager implements AuthenticationManager {\n    private JWTService jwtService;\n    private UserService userService;\n\n    public JWTAuthenticationManager(JWTService jwtService, UserService userService){\n        this.jwtService = jwtService;\n        this.userService = userService;\n\n    }\n\n    @Override\n    public Authentication authenticate(Authentication authentication) throws AuthenticationException {\n        if(authentication instanceof JWTAuthentication){\n            var jwtAuthentication = (JWTAuthentication)authentication;\n\n            var jwt = jwtAuthentication.getCredentials();\n            var userId = jwtService.retrieveUserId(jwt);\n            var userEntity = us", "dentials();\n            var userId = jwtService.retrieveUserId(jwt);\n            var userEntity = userService.getUser(userId);\n\n            jwtAuthentication.userEntity = userEntity;\n            jwtAuthentication.setAuthenticated(true);\n\n            return jwtAuthentication;\n        }\n        \n\n        // TODO Auto-generated method stub\n        throw new IllegalAccessError(\"Cannot authenticate with non-JWT authentication\");\n    }\n}\n", "package com.example.blog_server.security;\n\nimport java.util.Date;\n\nimport org.springframework.stereotype.Service;\n\nimport com.auth0.jwt.JWT;\nimport com.auth0.jwt.algorithms.Algorithm;\n\n@Service\npublic class JWTService {\n    private static final String JWT_KEY = \"jh537bkv323ug98dby0aqruboi29g847ty905\";\n    private Algorithm algorithm = Algorithm.HMAC256(JWT_KEY);\n\n    public String createJwt(Long userId){\n        return JWT.create().withSubject(userId.toString())\n                .withIssuedAt(new Date())\n                //.withExpiresAt()\n                .sign(algorithm);\n    }\n\n    public Long retrieveUserId(String jwtString){\n        var decodedJWT = JWT.decode(jwtString);\n        var userId = Long.valueOf(decodedJWT.getSubject());\n        return userId;\n    }\n\n}\n", "package com.example.blog_server.user;\n\nimport java.net.URI;\n\nimport org.modelmapper.ModelMapper;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.CrossOrigin;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport com.example.blog_server.common.dtos.ErrorResponse;\nimport com.example.blog_server.email.EmailDetails;\nimport com.example.blog_server.email.EmailServiceImpl;\nimport com.example.blog_server.security.JWTService;\nimport com.example.blog_server.user.dtos.CreateUserRequest;\nimport com.example.blog_server.user.dtos.LoginUserRequest;\nimport com.example.blog_server.user.dtos.User", "rt com.example.blog_server.user.dtos.LoginUserRequest;\nimport com.example.blog_server.user.dtos.UserResponse;\n\n@RestController\n@RequestMapping(\"/users\")\npublic class UserController {\n    \n    private final UserService userService;\n    private final ModelMapper modelMapper;\n    private final JWTService jwtService;\n    private final EmailServiceImpl emailService;\n\n    public UserController(UserService userService, ModelMapper modelMapper, JWTService jwtService,EmailServiceImpl emailService){\n        this.userService = userService;\n        this.modelMapper = modelMapper;\n        this.jwtService = jwtService;\n        this.emailService = emailService;\n    }\n\n    @PostMapping(\"\")\n    ResponseEntity<UserResponse> signupUser(@RequestBody CreateUserRequest request){\n        UserEntity savedUser = userService.createUser(request);\n        URI savedUserUri = URI.create(\"/users/\"+savedUser.getId());\n        var userResponse = modelMapper.map(savedUser, UserResponse.class);\n        userResponse.setT", "        var userResponse = modelMapper.map(savedUser, UserResponse.class);\n        userResponse.setToken(jwtService.createJwt(savedUser.getId()));\n        EmailDetails e = EmailDetails.builder()\n        .recipient(savedUser.getEmail())\n        .msgBody(\"You have Successfully registered in BlogZeee, \\n\\n\\n\\nhappy writing\")\n        .subject(\"subss\")\n        //.attachment(null)\n        .build();\n\n        emailService.sendSimpleEmail(e);\n        return ResponseEntity.created(savedUserUri).body(userResponse);\n    }   \n\n\n    @PostMapping(\"/login\")\n    ResponseEntity<UserResponse> loginUser(@RequestBody LoginUserRequest request){\n        UserEntity savedUser = userService.loginUser(request.getUsername(), request.getPassword());\n        var userResponse = modelMapper.map(savedUser, UserResponse.class);\n        userResponse.setToken(\n                jwtService.createJwt(savedUser.getId())\n        );\n\n        return ResponseEntity.ok(userResponse);\n    }\n\n    @ExceptionHandler({\n            User", " );\n\n        return ResponseEntity.ok(userResponse);\n    }\n\n    @ExceptionHandler({\n            UserService.UserNotFoundException.class,\n            UserService.InvalidCredentialsException.class\n    })\n    ResponseEntity<ErrorResponse> handleUserExceptions(Exception ex) {\n        String message;\n        HttpStatus status;\n\n        if (ex instanceof UserService.UserNotFoundException) {\n            message = ex.getMessage();\n            status = HttpStatus.NOT_FOUND;\n        } else if (ex instanceof UserService.InvalidCredentialsException) {\n            message = ex.getMessage();\n            status = HttpStatus.UNAUTHORIZED;\n        } else {\n            message = \"Something went wrong\";\n            status = HttpStatus.INTERNAL_SERVER_ERROR;\n        }\n\n         \n        ErrorResponse response = ErrorResponse.builder()\n        .message(message)\n        .build();               \n\n        return ResponseEntity.status(status).body(response);\n    }\n\n    @GetMapping(\"\")\n    ResponseEntity<String", "n ResponseEntity.status(status).body(response);\n    }\n\n    @GetMapping(\"\")\n    ResponseEntity<String> test(){\n        return ResponseEntity.ok(\"success\");\n    }\n}\n", "package com.example.blog_server.user;\n\nimport org.springframework.lang.NonNull;\nimport org.springframework.lang.Nullable;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport lombok.AccessLevel;\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.RequiredArgsConstructor;\nimport lombok.Setter;\nimport lombok.ToString;\n\n@Builder\n@NoArgsConstructor(access = AccessLevel.PROTECTED)\n@AllArgsConstructor\n@RequiredArgsConstructor\n@ToString\n@Getter\n@Setter\n@Entity(name = \"users\")\npublic class UserEntity {\n    @Id\n    @GeneratedValue(strategy = GenerationType.SEQUENCE)\n    @Column(nullable=false)\n    private Long id;\n\n    @Column(nullable = false)\n    @NonNull\n    private String username;\n\n    @Column(nullable = false)\n    @NonNull\n    private String password;\n\n    @Column(nullable = f", ";\n\n    @Column(nullable = false)\n    @NonNull\n    private String password;\n\n    @Column(nullable = false)\n    @NonNull\n    private String email;\n\n    @Column(nullable = true)\n    @Nullable\n    private String bio;\n\n\n    @Column(nullable = true)\n    @Nullable\n    private String image;\n\n}\n", "package com.example.blog_server.user;\n\nimport java.util.Optional;\n\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface UserRepository extends JpaRepository<UserEntity,Long> {\n    Optional<UserEntity> findByUsername(String username);\n}\n", "package com.example.blog_server.user;\n\nimport org.modelmapper.ModelMapper;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.stereotype.Service;\n\nimport com.example.blog_server.user.dtos.CreateUserRequest;\n\n@Service\npublic class UserService {\n\n    private final UserRepository usersRepository;\n    private final ModelMapper modelMapper;\n    private final PasswordEncoder passwordEncoder;\n\n    public UserService(UserRepository usersRepository, ModelMapper modelMapper,PasswordEncoder passwordEncoder) {\n        this.usersRepository = usersRepository;\n        this.modelMapper = modelMapper;\n        this.passwordEncoder = passwordEncoder;\n    }\n\n    public UserEntity createUser(CreateUserRequest u){\n        UserEntity newUser = modelMapper.map(u ,UserEntity.class);\n        newUser.setPassword(passwordEncoder.encode(u.getPassword()));//todo password encoder\n        return usersRepository.save(newUser);\n    }\n\n    public UserEntity getUser(String use", "ncoder\n        return usersRepository.save(newUser);\n    }\n\n    public UserEntity getUser(String username){\n        return usersRepository.findByUsername(username).orElseThrow(()-> new UserNotFoundException(username));\n    }\n\n    public UserEntity getUser(Long userId) {\n        return usersRepository.findById(userId).orElseThrow(() -> new UserNotFoundException(userId));\n    }\n\n    public UserEntity loginUser(String username, String password){\n        var user = usersRepository.findByUsername(username).orElseThrow(() -> new UserNotFoundException(username));\n        var passMatch = passwordEncoder.matches(password, user.getPassword());\n        if(!passMatch) throw new InvalidCredentialsException();\n        return user;\n    }\n\n\n\n    public static class UserNotFoundException extends IllegalArgumentException {\n        public UserNotFoundException(String username) {\n            super(\"User with username: \" + username + \" not found\");\n        }\n\n        public UserNotFoundException(Long userI", "h username: \" + username + \" not found\");\n        }\n\n        public UserNotFoundException(Long userId) {\n            super(\"User with id: \" + userId + \" not found\");\n        }\n    }\n\n    public static class InvalidCredentialsException extends IllegalArgumentException {\n        public InvalidCredentialsException() {\n            super(\"Invalid username or password combination\");\n        }\n    }\n}\n", "package com.example.blog_server.user.dtos;\n\nimport org.springframework.lang.NonNull;\n\nimport lombok.AccessLevel;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.Setter;\n\n@Data\n@Setter(AccessLevel.NONE)\n@Builder\npublic class CreateUserRequest {\n\n    @NonNull\n    private String username;\n\n    @NonNull\n    private String password;\n\n    @NonNull\n    private String email;\n\n}\n", "package com.example.blog_server.user.dtos;\n\nimport org.springframework.lang.NonNull;\n\nimport lombok.AccessLevel;\nimport lombok.Data;\nimport lombok.Setter;\n\n@Data\n@Setter(AccessLevel.NONE)\npublic class LoginUserRequest {\n    @NonNull\n    private String username;\n    @NonNull\n    private String password;\n}", "package com.example.blog_server.user.dtos;\n\nimport lombok.Data;\n\n@Data\npublic class UserResponse {\n    private Long id;\n    private String username;\n    private String email;\n    private String bio;\n    private String image;\n    private String token;\n}", "package com.example.blog_server;\n\nimport org.modelmapper.ModelMapper;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\n\n@SpringBootApplication\npublic class BlogServerApplication {\n\n\t\n\n\t@Bean\n    public ModelMapper modelMapper() {\n        return new ModelMapper();\n    }\n\n\t@Bean\n\tpublic PasswordEncoder PasswordEncoder(){\n\t\treturn new BCryptPasswordEncoder();\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(BlogServerApplication.class, args);\n\t}\n \n}\n", "package com.example.blog_server.article;\n\nimport java.net.URI;\nimport java.util.Optional;\n\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.security.core.annotation.AuthenticationPrincipal;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.PutMapping;\nimport org.springframework.web.bind.annotation.DeleteMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestHeader;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.servlet.support.ServletUriComponentsBuilder;\n\nimport com.example.blog_server.article.dtos.CreateArticleRequest;\nimport com.example.blog_server.article.dtos.Upda", "mple.blog_server.article.dtos.CreateArticleRequest;\nimport com.example.blog_server.article.dtos.UpdateArticleRequest;\nimport com.example.blog_server.security.JWTService;\nimport com.example.blog_server.user.UserEntity;\n\n@RestController\n@RequestMapping(\"/articles\")\npublic class ArticleController {\n\n    private final ArticleService articleService;\n    private final JWTService jwtService;\n    public ArticleController(ArticleService articleService, JWTService jwtService) {\n        this.articleService = articleService;\n        this.jwtService = jwtService;\n    }\n\n    @GetMapping(\"\")\n    public ResponseEntity<Iterable<ArticleEntity>> getAllArticles() {\n        try {\n            Iterable<ArticleEntity> articles = articleService.getAllArticle();\n            return ResponseEntity.ok(articles);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n                    .body(null);\n        }\n    }\n\n    @GetMapping", "(HttpStatus.INTERNAL_SERVER_ERROR)\n                    .body(null);\n        }\n    }\n\n    @GetMapping(\"/{id}\")\n    public ResponseEntity<ArticleEntity> getArticleById(@PathVariable(\"id\") Long id) {\n        try {\n            ArticleEntity article = articleService.getArticleById(id).get(); // Assuming ID can be slug, otherwise\n                                                                             // adjust this\n            return ResponseEntity.ok(article);\n        } catch (ArticleService.ArticleNotFoundException e) {\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n                    .body(null);\n        }\n    }\n\n    @PostMapping(\"\")\n    public ResponseEntity<?> createArticle(@AuthenticationPrincipal UserEntity user,\n            @RequestBody CreateArticleRequest article) {\n        try {\n            if (article.getTitl", "          @RequestBody CreateArticleRequest article) {\n        try {\n            if (article.getTitle() != null && article.getBody() != null) {\n                ArticleEntity createdArticle = articleService.createArticle(article, user.getId());\n                URI location = ServletUriComponentsBuilder.fromCurrentRequest()\n                        .path(\"/{id}\")\n                        .buildAndExpand(createdArticle.getId())\n                        .toUri();\n                return ResponseEntity.created(location).body(createdArticle);\n            } else {\n                return ResponseEntity.badRequest().body(\"Title and body must not be null\");\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n                    .body(\"An error occurred while creating the article\");\n        }\n    }\n\n    @PutMapping(\"/{id}\")\n    public ResponseEntity<?> updateArticle(@PathVariable(\"id\") Long articleId", "  @PutMapping(\"/{id}\")\n    public ResponseEntity<?> updateArticle(@PathVariable(\"id\") Long articleId,\n                                           @RequestBody UpdateArticleRequest articleRequest,\n                                           @RequestHeader(\"Authorization\") String authHeader) {\n        try {\n            // Extract the JWT token and retrieve the userId\n            String token = authHeader.replace(\"Bearer \", \"\");\n            Long userId = jwtService.retrieveUserId(token);\n\n            // Call the update service method with the userId\n            ArticleEntity updatedArticle = articleService.updateArticle(articleId, articleRequest, userId);\n\n            return ResponseEntity.ok(updatedArticle);\n        } catch (ArticleService.UnauthorizedException e) {\n            return ResponseEntity.status(HttpStatus.FORBIDDEN).body(e.getMessage());\n        } catch (ArticleService.ArticleNotFoundException e) {\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage", "FoundException e) {\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage());\n        } catch (Exception e) {\n            e.printStackTrace();\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n                    .body(\"An error occurred while updating the article\");\n        }\n    }\n\n    @DeleteMapping(\"/{id}\")\n    public ResponseEntity<?> deleteArticle(@PathVariable(\"id\") Long id) {\n        try {\n            articleService.deleteArticle(id);\n            return ResponseEntity.noContent().build();\n        } catch (ArticleService.ArticleNotFoundException e) {\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(\"Article not found\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n                    .body(\"An error occurred while deleting the article\");\n        }\n    }\n    \n}\n", "eting the article\");\n        }\n    }\n    \n}\n", "package com.example.blog_server.article;\n\nimport org.springframework.lang.NonNull;\n\nimport com.example.blog_server.user.UserEntity;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.JoinColumn;\nimport jakarta.persistence.ManyToOne;\nimport lombok.AccessLevel;\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.RequiredArgsConstructor;\nimport lombok.Setter;\nimport lombok.ToString;\n\n\n@Entity(name = \"articles\")\n@Getter\n@Setter\n@ToString\n@Builder\n@RequiredArgsConstructor\n@AllArgsConstructor\n@NoArgsConstructor(access = AccessLevel.PROTECTED)\npublic class ArticleEntity {\n    \n    @Id\n    @GeneratedValue(strategy = GenerationType.SEQUENCE)\n    @Column(nullable = false)\n    private Long id;\n\n\n    @NonNull\n    private String title;\n\n    @NonNull\n    @Column(uni", "= false)\n    private Long id;\n\n\n    @NonNull\n    private String title;\n\n    @NonNull\n    @Column(unique = true)\n    private String slug;\n\n    @NonNull\n    private String subtitle;\n\n    @NonNull\n    @Column(length = 65535)\n    private String body;\n\n    private String createdAt;\n\n\n    @Column(length = 65535)\n    private String imageLink;\n\n    @ManyToOne\n    @JoinColumn(name = \"authorId\", nullable = false)\n    private UserEntity author;\n    \n}\n", "package com.example.blog_server.article;\n\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface ArticleRepository extends JpaRepository<ArticleEntity, Long>{\n    ArticleEntity findBySlug(String slug);\n}\n", "package com.example.blog_server.article;\n\nimport java.util.Optional;\n\nimport org.springframework.stereotype.Service;\n\nimport com.example.blog_server.article.dtos.CreateArticleRequest;\nimport com.example.blog_server.article.dtos.UpdateArticleRequest;\nimport com.example.blog_server.comments.CommentService;\nimport com.example.blog_server.user.UserRepository;\nimport com.example.blog_server.user.UserService;\n\nimport jakarta.transaction.Transactional;\n\n@Service\npublic class ArticleService {\n    private final ArticleRepository articleRepository;\n    private final UserRepository userRepository;\n    private final CommentService commentService;\n\n    public ArticleService(ArticleRepository articleRepository, UserRepository userRepository,\n        CommentService commentService) {\n        this.articleRepository = articleRepository;\n        this.userRepository = userRepository;\n        this.commentService = commentService; // Initialize CommentService\n    }\n\n    public Iterable<ArticleEntity> getAll", "vice = commentService; // Initialize CommentService\n    }\n\n    public Iterable<ArticleEntity> getAllArticle() {\n        return articleRepository.findAll();\n    }\n\n    public ArticleEntity getArticleBySlug(String slug) {\n        var article = articleRepository.findBySlug(slug);\n        if (article == null) {\n            throw new ArticleNotFoundException(slug);\n        }\n        return article;\n    }\n\n    public ArticleEntity createArticle(CreateArticleRequest a, Long authorId) {\n        var author = userRepository.findById(authorId)\n                .orElseThrow(() -> new UserService.UserNotFoundException(authorId));\n        return articleRepository.save(ArticleEntity.builder()\n                .title(a.getTitle())\n                .slug(a.getTitle().toLowerCase().replaceAll(\"\\\\s+\", \"-\"))\n                .body(a.getBody())\n                .subtitle(a.getSubtitle())\n                .imageLink(a.getImageLink())\n                .author(author)\n                .build());\n    }\n\n    public Art", "k(a.getImageLink())\n                .author(author)\n                .build());\n    }\n\n    public ArticleEntity updateArticle(Long articleId, UpdateArticleRequest a, Long userId) {\n        var article = articleRepository.findById(articleId).orElseThrow(() -> new ArticleNotFoundException(articleId));\n\n        if (!article.getAuthor().getId().equals(userId)) {\n            throw new UnauthorizedException(\"You are not authorized to update this article\");\n        }\n\n        if (a.getTitle() != null) {\n            article.setTitle(a.getTitle());\n            article.setSlug(a.getTitle().toLowerCase().replaceAll(\"\\\\s+\", \"-\"));\n\n        }\n\n        if (a.getBody() != null) {\n            article.setBody(a.getBody());\n\n        }\n\n        if (a.getSubtitle() != null) {\n            article.setSubtitle(a.getSubtitle());\n\n        }\n\n        if (a.getImageLink() != null) {\n            article.setImageLink(a.getImageLink());\n        }\n\n        return articleRepository.save(article);\n\n    }\n\n    static cl", "(a.getImageLink());\n        }\n\n        return articleRepository.save(article);\n\n    }\n\n    static class UnauthorizedException extends RuntimeException {\n        public UnauthorizedException(String message) {\n            super(message);\n        }\n    }\n\n    public static class ArticleNotFoundException extends IllegalArgumentException {\n        public ArticleNotFoundException(String slug) {\n            super(\"Article \" + slug + \" not found\");\n        }\n\n        public ArticleNotFoundException(Long id) {\n            super(\"Article with id: \" + id + \" not found\");\n        }\n    }\n\n    public Optional<ArticleEntity> getArticleById(Long id) {\n        // TODO Auto-generated method stub\n        var article = articleRepository.findById(id);\n        if (article == null) {\n            throw new ArticleNotFoundException(id);\n        }\n        return article;\n    }\n\n    @Transactional\n    public void deleteArticle(Long id) {\n        if (articleRepository.existsById(id)) {\n            // Delete all ", " deleteArticle(Long id) {\n        if (articleRepository.existsById(id)) {\n            // Delete all comments associated with the article\n            commentService.deleteAllByArticleId(id);\n            \n            // Delete the article\n            articleRepository.deleteById(id);\n        } else {\n            throw new ArticleNotFoundException(id); // Custom exception if article not found\n        }\n    }\n}\n", "package com.example.blog_server.article.dtos;\n\nimport lombok.AccessLevel;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NonNull;\nimport lombok.Setter;\nimport org.springframework.lang.Nullable;\n\n@Data\n@Setter(AccessLevel.NONE)\n@Builder\npublic class CreateArticleRequest {\n    @NonNull\n    private String title;\n    @NonNull\n    private String body;\n    @Nullable\n    private String subtitle;\n    @Nullable\n    private String imageLink;\n}", "package com.example.blog_server.article.dtos;\n\nimport org.springframework.lang.Nullable;\n\nimport lombok.AccessLevel;\nimport lombok.Data;\nimport lombok.Setter;\n\n@Data\n@Setter(AccessLevel.NONE)\npublic class UpdateArticleRequest {\n    @Nullable\n    private String title;\n    @Nullable\n    private String body;\n    @Nullable\n    private String subtitle;\n    @Nullable\n    private String imageLink;\n\n}", "package com.example.blog_server.comments;\n\nimport java.util.Date;\n\nimport org.springframework.data.annotation.CreatedDate;\nimport jakarta.persistence.Id;\nimport org.springframework.lang.Nullable;\n\nimport com.example.blog_server.article.ArticleEntity;\nimport com.example.blog_server.user.UserEntity;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.JoinColumn;\nimport jakarta.persistence.ManyToOne;\nimport lombok.AccessLevel;\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.NonNull;\nimport lombok.RequiredArgsConstructor;\nimport lombok.Setter;\nimport lombok.ToString;\n\n@Entity(name = \"comments\")\n@Getter\n@Setter\n@ToString\n@Builder\n@RequiredArgsConstructor\n@AllArgsConstructor\n@NoArgsConstructor(access = AccessLevel.PROTECTED)\npublic class CommentEntity {\n    @Id\n    @GeneratedValue(stra", "ructor(access = AccessLevel.PROTECTED)\npublic class CommentEntity {\n    @Id\n    @GeneratedValue(strategy = GenerationType.SEQUENCE)\n    @Column(nullable = false)\n    private Long id;\n\n    @Nullable\n    private String title;\n\n    @Column(length = 65535)\n    @NonNull\n    private String body;\n\n    @CreatedDate\n    private Date createdAt;\n\n    @ManyToOne\n    @JoinColumn(name = \"articleId\", nullable = false)\n    private ArticleEntity article;\n\n    @ManyToOne\n    @JoinColumn(name = \"authorId\", nullable = false)\n    private UserEntity author;\n\n\n}", "package com.example.blog_server.comments;\n\nimport java.util.List;\n\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface CommentRepository extends JpaRepository<CommentEntity, Long> {\n    List<CommentEntity> findAllByArticleId(Long articleId);\n    void deleteAllByArticleId(Long articleId);\n}\n", "package com.example.blog_server.comments;\n\nimport org.springframework.web.bind.annotation.*;\nimport com.example.blog_server.article.ArticleService;\nimport com.example.blog_server.comments.dtos.CreateCommentRequest;\nimport com.example.blog_server.security.JWTService;\n\n@RestController\n@RequestMapping(\"/articles/{articleSlug}/comments\")\npublic class CommentsController {\n\n    private final CommentService commentService;\n    private final ArticleService articleService;\n\n    private final JWTService jwtService;\n\n    public CommentsController(CommentService commentService, ArticleService articleService, JWTService jwtService) {\n        this.commentService = commentService;\n        this.articleService = articleService;\n        this.jwtService = jwtService;\n    }\n\n\n\n    @GetMapping\n    public Iterable<CommentEntity> getCommentsByArticleSlug(@PathVariable(\"articleSlug\") String articleSlug) {\n        // Get the article by slug\n        var article = articleService.getArticleBySlug(articleSlug);\n  ", "   // Get the article by slug\n        var article = articleService.getArticleBySlug(articleSlug);\n        // Fetch comments for the article\n        return commentService.getCommentsByArticle(article.getId());\n    }\n\n    @PostMapping\n    public CommentEntity createComment(@PathVariable(\"articleSlug\") String articleSlug,\n                                       @RequestBody CreateCommentRequest request,\n                                       @RequestHeader(\"Authorization\") String token) {\n        // Extract userId from JWT token\n        Long userId = extractUserIdFromToken(token);\n        // Get the article by slug\n        var article = articleService.getArticleBySlug(articleSlug);\n        // Create and return the new comment\n        return commentService.createComment(request, userId, article.getId());\n    }\n\n    @DeleteMapping(\"/{commentId}\")\n    public void deleteComment(@PathVariable(\"articleSlug\") String articleSlug,\n                              @PathVariable(\"commentId\") Long commen", "ticleSlug\") String articleSlug,\n                              @PathVariable(\"commentId\") Long commentId,\n                              @RequestHeader(\"Authorization\") String token) {\n        // Extract userId from JWT token\n        Long userId = extractUserIdFromToken(token);\n        // Delete the comment\n        commentService.deleteComment(commentId, userId);\n    }\n\n    private Long extractUserIdFromToken(String token) {\n        // Assuming the JWT token starts with \"Bearer \"\n        String jwtToken = token.substring(7);\n        return jwtService.retrieveUserId(jwtToken);\n    }\n\n    \n}\n", "package com.example.blog_server.comments;\n\nimport java.util.Optional;\n\nimport org.springframework.stereotype.Service;\n\nimport com.example.blog_server.article.ArticleEntity;\nimport com.example.blog_server.article.ArticleRepository;\nimport com.example.blog_server.article.ArticleService;\nimport com.example.blog_server.comments.dtos.CreateCommentRequest;\nimport com.example.blog_server.user.UserRepository;\nimport com.example.blog_server.user.UserService;\n\n@Service\npublic class CommentService {\n    private final CommentRepository commentRepository;\n    private final ArticleRepository articleRepository;\n    private final UserRepository userRepository;\n\n    public CommentService(CommentRepository commentRepository, ArticleRepository articleRepository, UserRepository userRepository) {\n        this.commentRepository = commentRepository;\n        this.articleRepository = articleRepository;\n        this.userRepository = userRepository;\n    }\n\n    public Iterable<CommentEntity> getCommentsByArticle(", "his.userRepository = userRepository;\n    }\n\n    public Iterable<CommentEntity> getCommentsByArticle(Long articleId) {\n        return commentRepository.findAllByArticleId(articleId);\n    }\n\n    public CommentEntity createComment(CreateCommentRequest request, Long authorId, Long articleId) {\n        var article = articleRepository.findById(articleId)\n                .orElseThrow(() -> new ArticleService.ArticleNotFoundException(articleId));\n\n        var author = userRepository.findById(authorId)\n                .orElseThrow(() -> new UserService.UserNotFoundException(authorId));\n\n        var comment = CommentEntity.builder()\n                .body(request.getBody())\n                .title(request.getTitle())\n                .article(article)\n                .author(author)\n                .build();\n\n        return commentRepository.save(comment);\n    }\n\n    public void deleteComment(Long commentId, Long userId) {\n        var comment = commentRepository.findById(commentId)\n                ", "mmentId, Long userId) {\n        var comment = commentRepository.findById(commentId)\n                .orElseThrow(() -> new CommentNotFoundException(commentId));\n\n        if (!comment.getAuthor().getId().equals(userId)) {\n            throw new UnauthorizedException(\"You are not authorized to delete this comment\");\n        }\n\n        commentRepository.deleteById(commentId);\n    }\n    \n    public void deleteAllByArticleId(Long articleId) {\n        commentRepository.deleteAllByArticleId(articleId);\n    }\n\n    static class UnauthorizedException extends RuntimeException {\n        public UnauthorizedException(String message) {\n            super(message);\n        }\n    }\n\n    static class CommentNotFoundException extends IllegalArgumentException {\n        public CommentNotFoundException(Long id) {\n            super(\"Comment with id: \" + id + \" not found\");\n        }\n    }\n}\n", "package com.example.blog_server.comments.dtos;\n\nimport lombok.Builder;\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\n@Builder\npublic class CreateCommentRequest {\n    private String title;\n    private String body;\n}\n", "package com.example.blog_server.common;\n\nimport org.springframework.stereotype.Component;\n\nimport com.example.blog_server.article.ArticleService;\nimport com.example.blog_server.article.dtos.CreateArticleRequest;\nimport com.example.blog_server.comments.CommentService;\nimport com.example.blog_server.comments.dtos.CreateCommentRequest;\nimport com.example.blog_server.user.UserService;\nimport com.example.blog_server.user.dtos.CreateUserRequest;\n\n@Component\npublic class SeedData {\n    UserService userService;\n    ArticleService articleService;\n    CommentService commentService;\n\n    public SeedData(UserService userService, ArticleService articleService, CommentService commentService) {\n        System.out.println(\"########################Seeding Data#########################\");\n        this.userService = userService;\n        this.articleService = articleService;\n        this.commentService = commentService;\n\n        createUsers();\n        createArticles();\n        createComments();\n    }\n\n   ", "mmentService;\n\n        createUsers();\n        createArticles();\n        createComments();\n    }\n\n    public void createUsers(){\n        userService.createUser(CreateUserRequest.builder().username(\"siddharth\").password(\"Sid@1234\").email(\"siddharth@gmail.com\").build());\n        userService.createUser(CreateUserRequest.builder().username(\"siddharth1\").password(\"Sid@1234\").email(\"siddharth1@gmail.com\").build());\n        userService.createUser(CreateUserRequest.builder().username(\"siddharth2\").password(\"Sid@1234\").email(\"siddharth2@gmail.com\").build());\n        userService.createUser(CreateUserRequest.builder().username(\"siddharth3\").password(\"Sid@1234\").email(\"siddharth3@gmail.com\").build());\n    }\n\n\n    public void createArticles(){\n\n        var user = userService.getUser(\"siddharth\");\n        var user1 = userService.getUser(\"siddharth1\");\n        var user2 = userService.getUser(\"siddharth2\");\n        var user3 = userService.getUser(\"siddharth3\");\n        articleService.createArticle(Crea", "\");\n        var user3 = userService.getUser(\"siddharth3\");\n        articleService.createArticle(CreateArticleRequest.builder().title(\"Title1\").body(\"<ul>\\n\" + //\n                        \"        <li>The Moon is Earth's only natural satellite and the fifth-largest moon in the Solar System.</li>\\n\" + //\n                        \"        <li>It is about 384,400 km (238,855 miles) away from Earth.</li>\\n\" + //\n                        \"        <li>The Moon has a diameter of 3,474 km (2,159 miles), about one-quarter the size of Earth.</li>\\n\" + //\n                        \"        <li>It takes approximately 27.3 days for the Moon to orbit Earth, known as a sidereal month.</li>\\n\" + //\n                        \"        <li>The Moon's surface is covered in craters, valleys, and flat plains called maria.</li>\\n\" + //\n                        \"        <li>The far side of the Moon, often mistakenly called the \\\"dark side,\\\" is never visible from Earth.</li>\\n\" + //\n                        \"        <l", "led the \\\"dark side,\\\" is never visible from Earth.</li>\\n\" + //\n                        \"        <li>The Moon has a very thin atmosphere called an exosphere, which does not support life.</li>\\n\" + //\n                        \"        <li>The Moon influences Earth's tides due to its gravitational pull.</li>\\n\" + //\n                        \"        <li>It experiences extreme temperature variations, ranging from -173\u00b0C (-280\u00b0F) at night to 127\u00b0C (260\u00b0F) during the day.</li>\\n\" + //\n                        \"        <li>The Moon has no water in liquid form, but water ice has been found in permanently shadowed craters.</li>\\n\" + //\n                        \"        <li>The Moon's gravitational pull is about one-sixth that of Earth's, making objects weigh less.</li>\\n\" + //\n                        \"        <li>During a lunar eclipse, the Earth comes between the Sun and the Moon, casting a shadow on the Moon.</li>\\n\" + //\n                        \"        <li>The Moon's phases, such as new moon,", " on the Moon.</li>\\n\" + //\n                        \"        <li>The Moon's phases, such as new moon, full moon, and crescent, are caused by its position relative to Earth and the Sun.</li>\\n\" + //\n                        \"        <li>Neil Armstrong and Buzz Aldrin were the first humans to land on the Moon on July 20, 1969, during NASA's Apollo 11 mission.</li>\\n\" + //\n                        \"        <li>The Moon is slowly drifting away from Earth at a rate of about 3.8 cm (1.5 inches) per year.</li>\\n\" + //\n                        \"        <li>The Moon has no magnetic field, unlike Earth.</li>\\n\" + //\n                        \"        <li>It is believed that the Moon was formed about 4.5 billion years ago, possibly from debris left after a collision between Earth and a Mars-sized object.</li>\\n\" + //\n                        \"        <li>The largest crater on the Moon is the South Pole-Aitken Basin, which is about 2,500 km (1,550 miles) in diameter.</li>\\n\" + //\n                        ", "tken Basin, which is about 2,500 km (1,550 miles) in diameter.</li>\\n\" + //\n                        \"        <li>The Moon's surface is covered in fine dust and rocky debris known as regolith.</li>\\n\" + //\n                        \"        <li>Future space missions, like NASA's Artemis program, aim to return humans to the Moon and establish a sustainable presence.</li>\\n\" + //\n                        \"    </ul>\").subtitle(\"Subtitle1\").imageLink(\"https://wallpapercave.com/wp/GpUHmC4.jpg\").build(), user.getId());\n        articleService.createArticle(CreateArticleRequest.builder().title(\"Title2\").body(\"Body2\").subtitle(\"Subtitle2\").imageLink(\"https://wallpapercave.com/wp/Dvslduk.jpg\").build(), user1.getId());\n        articleService.createArticle(CreateArticleRequest.builder().title(\"Title3\").body(\"Body3\").subtitle(\"Subtitle3\").imageLink(\"https://wallpapercave.com/uwp/uwp4211601.png\").build(), user2.getId());\n        articleService.createArticle(CreateArticleRequest.builder().title(\"Title4\")", " user2.getId());\n        articleService.createArticle(CreateArticleRequest.builder().title(\"Title4\").body(\"Body4\").subtitle(\"Subtitle4\").imageLink(\"https://wallpapercave.com/wp/wp4096172.jpg\").build(), user3.getId());\n        articleService.createArticle(CreateArticleRequest.builder().title(\"Title5\").body(\"Body5\").subtitle(\"Subtitle5\").imageLink(\"https://images2.alphacoders.com/602/thumb-1920-602604.jpg\").build(), user2.getId());\n        articleService.createArticle(CreateArticleRequest.builder().title(\"Title6\").body(\"Body6\").subtitle(\"Subtitle6\").imageLink(\"https://images6.alphacoders.com/133/thumb-1920-1339623.png\").build(), user.getId());\n    }\n\n\n    public void createComments(){\n\n        var user = userService.getUser(\"siddharth\");\n        var user1 = userService.getUser(\"siddharth1\");\n        var user2 = userService.getUser(\"siddharth2\");\n        var user3 = userService.getUser(\"siddharth3\");\n        var article = articleService.getArticleBySlug(\"title1\");\n        var article1 = a", "dharth3\");\n        var article = articleService.getArticleBySlug(\"title1\");\n        var article1 = articleService.getArticleBySlug(\"title2\");\n        var article2 = articleService.getArticleBySlug(\"title3\");  \n        var article3 = articleService.getArticleBySlug(\"title4\");\n        commentService.createComment(CreateCommentRequest.builder().body(\"body1\").title(\"title1\").build(), user.getId(), article.getId());\n        commentService.createComment(CreateCommentRequest.builder().body(\"body2\").title(\"title2\").build(), user1.getId(), article1.getId());\n        commentService.createComment(CreateCommentRequest.builder().body(\"body3\").title(\"title3\").build(), user2.getId(), article2.getId());\n        commentService.createComment(CreateCommentRequest.builder().body(\"body4\").title(\"title4\").build(), user3.getId(), article3.getId());\n\n        var user4 = userService.createUser(CreateUserRequest.builder().username(\"siddharth4\").password(\"Sid@1234\").email(\"siddharth4@gmail.com\").build());\n      ", "builder().username(\"siddharth4\").password(\"Sid@1234\").email(\"siddharth4@gmail.com\").build());\n        var article4 = articleService.createArticle(CreateArticleRequest.builder().title(\"Title7\").body(\"Body7\").subtitle(\"Subtitle7\").imageLink(\"https://images5.alphacoders.com/602/thumb-1920-602604.jpg\").build(), user4.getId());\n        commentService.createComment(CreateCommentRequest.builder().body(\"body5\").title(\"title5\").build(), user4.getId(), article4.getId());\n        \n        var user5 = userService.createUser(CreateUserRequest.builder().username(\"siddharth5\").password(\"Sid@1234\").email(\"siddharth5@gmail.com\").build());\n        var article5 = articleService.createArticle(CreateArticleRequest.builder().title(\"Title8\").body(\"Body8\").subtitle(\"Subtitle8\").imageLink(\"https://images2.alphacoders.com/602/thumb-1920-602604.jpg\").build(), user5.getId());\n        commentService.createComment(CreateCommentRequest.builder().body(\"body6\").title(\"title6\").build(), user5.getId(), article5.getId())", "eateCommentRequest.builder().body(\"body6\").title(\"title6\").build(), user5.getId(), article5.getId());\n\n        var user6 = userService.createUser(CreateUserRequest.builder().username(\"siddharth6\").password(\"Sid@1234\").email(\"siddharth6@gmail.com\").build());\n        var article6 = articleService.createArticle(CreateArticleRequest.builder().title(\"Title9\").body(\"Body9\").subtitle(\"Subtitle9\").imageLink(\"https://images6.alphacoders.com/133/thumb-1920-1339623.png\").build(), user6.getId());\n        commentService.createComment(CreateCommentRequest.builder().body(\"body7\").title(\"title7\").build(), user6.getId(), article6.getId());\n\n        var user7 = userService.createUser(CreateUserRequest.builder().username(\"siddharth7\").password(\"Sid@1234\").email(\"siddharth7@gmail.com\").build());\n        var article7 = articleService.createArticle(CreateArticleRequest.builder().title(\"Title10\").body(\"Body10\").subtitle(\"Subtitle10\").imageLink(\"https://images5.alphacoders.com/602/thumb-1920-602604.jpg\").buil", ").subtitle(\"Subtitle10\").imageLink(\"https://images5.alphacoders.com/602/thumb-1920-602604.jpg\").build(), user7.getId());\n        commentService.createComment(CreateCommentRequest.builder().body(\"body8\").title(\"title8\").build(), user7.getId(), article7.getId());\n\n        var user8 = userService.createUser(CreateUserRequest.builder().username(\"siddharth8\").password(\"Sid@1234\").email(\"siddharth8@gmail.com\").build());\n        var article8 = articleService.createArticle(CreateArticleRequest.builder().title(\"Title11\").body(\"Body11\").subtitle(\"Subtitle11\").imageLink(\"https://images2.alphacoders.com/602/thumb-1920-602604.jpg\").build(), user8.getId());\n        commentService.createComment(CreateCommentRequest.builder().body(\"body9\").title(\"title9\").build(), user8.getId(), article8.getId());\n\n        \n\n    }\n       \n}\n", "package com.example.blog_server.common.dtos;\n\nimport lombok.Builder;\nimport lombok.Data;\n\n@Data\n@Builder\npublic class ErrorResponse {\n    private String message;\n}", "package com.example.blog_server.email;\n\n// Importing required classes\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n \n// Annotations\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@Builder\n\npublic class EmailDetails {\n \n    // Class data members\n    private String recipient;\n    private String msgBody;\n    private String subject;\n    private String attachment;\n}", "package com.example.blog_server.email;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.mail.SimpleMailMessage;\nimport org.springframework.mail.javamail.JavaMailSender;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class EmailServiceImpl  {\n \n      \n    @Autowired \n    private JavaMailSender javaMailSender;\n \n    @Value(\"${spring.mail.username}\") \n    private String sender;\n\n    public Boolean sendSimpleEmail(EmailDetails emailDetails){\n        try {\n            SimpleMailMessage mailMessage = new SimpleMailMessage();\n            System.out.println(sender);\n            System.out.println(emailDetails);\n            mailMessage.setFrom(sender);\n            mailMessage.setTo(emailDetails.getRecipient());\n            mailMessage.setText(emailDetails.getMsgBody());\n            mailMessage.setSubject(emailDetails.getSubject());\n\n            System.err.println(mailMessage);\n ", "  mailMessage.setSubject(emailDetails.getSubject());\n\n            System.err.println(mailMessage);\n            javaMailSender.send(mailMessage);\n            System.out.println(\"successfullt mail sent\");\n            return true;\n            \n        } catch (Exception e) {\n            System.out.println(\"failed \"+e);\n            return false;\n\n        }\n    }\n \n\n}", "package com.example.blog_server.security;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.security.config.Customizer;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;\nimport org.springframework.security.config.http.SessionCreationPolicy;\nimport org.springframework.security.web.SecurityFilterChain;\nimport org.springframework.security.web.authentication.AnonymousAuthenticationFilter;\nimport org.springframework.web.servlet.config.annotation.CorsRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\nimport com.example.blog_server.user.UserService;\n\n@Configuration\n@EnableWebSecurity\npublic class AppSecurityConfig", "mple.blog_server.user.UserService;\n\n@Configuration\n@EnableWebSecurity\npublic class AppSecurityConfig {\n\n    private final JWTService jwtService;\n    private final UserService userService;\n\n    public AppSecurityConfig(JWTService jwtService, UserService userService) {\n        this.jwtService = jwtService;\n        this.userService = userService;\n    }\n\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n\n        http.csrf(AbstractHttpConfigurer::disable)\n            .cors(Customizer.withDefaults())  // Enable CORS with default configuration\n            .authorizeHttpRequests(auth -> auth\n                .requestMatchers(HttpMethod.POST, \"/users\", \"/users/login\").permitAll()\n                .requestMatchers(HttpMethod.GET, \"/articles\", \"/articles/*\", \"/h2-console/**\", \"/**\").permitAll()\n                .anyRequest().authenticated())\n            .addFilterBefore(new JWTAuthenticationFilter(new JWTAuthenticationManager(jwtService, userService)),\n      ", "terBefore(new JWTAuthenticationFilter(new JWTAuthenticationManager(jwtService, userService)),\n                             AnonymousAuthenticationFilter.class)\n            .httpBasic(Customizer.withDefaults())\n            .sessionManagement(session -> session\n                .sessionCreationPolicy(SessionCreationPolicy.STATELESS));\n\n        return http.build();\n    }\n\n    @Bean\n    public WebMvcConfigurer corsConfigurer() {\n        return new WebMvcConfigurer() {\n            @Override\n            public void addCorsMappings(CorsRegistry registry) {\n                registry.addMapping(\"/**\")\n                        .allowedOrigins(\"https://blog-client-eight-mauve.vercel.app/\") // Adjust this to your frontend URL\n                        .allowedMethods(\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\")\n                        .allowedHeaders(\"*\")\n                        .allowCredentials(true);\n            }\n        };\n    }\n}\n", "          }\n        };\n    }\n}\n", "package com.example.blog_server.security;\n\nimport java.util.Collection;\n\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.GrantedAuthority;\nimport javax.security.auth.Subject;\n\nimport com.example.blog_server.user.UserEntity;\n\npublic class JWTAuthentication implements Authentication {\n    String jwt;\n    UserEntity userEntity;\n\n    public JWTAuthentication(String jwt) {\n        this.jwt = jwt;\n    }\n\n\n    @Override\n    public Collection<? extends GrantedAuthority> getAuthorities() {\n        return null;\n    }\n\n    /**\n     * Returns the credentials of the {@code Authentication} request.\n     * For eg, the password, or the Bearer token, or the cookie\n     * @return\n     */\n    @Override\n    public String getCredentials() {\n        return jwt;\n    }\n\n    @Override\n    public Object getDetails() {\n        return null;\n    }\n\n    /**\n     * Returns the principal of the {@code Authentication} request.\n     * The \"principal\" is the entity that ", "urns the principal of the {@code Authentication} request.\n     * The \"principal\" is the entity that is being authenticated.\n     * In this case it is the User.\n     * @return\n     */\n    @Override\n    public UserEntity getPrincipal() {\n        return userEntity;\n    }\n\n    @Override\n    public boolean isAuthenticated() {\n        return (userEntity != null);\n    }\n\n    @Override\n    public void setAuthenticated(boolean isAuthenticated) throws IllegalArgumentException {\n    }\n\n    @Override\n    public String getName() {\n        return null;\n    }\n\n    @Override\n    public boolean implies(Subject subject) {\n        return Authentication.super.implies(subject);\n    }\n\n    \n}\n", "package com.example.blog_server.security;\n\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.web.authentication.AuthenticationConverter;\n\nimport jakarta.servlet.http.HttpServletRequest;\n\npublic class JWTAuthenticationConverter implements AuthenticationConverter {\n    \n     @Override\n    public Authentication convert(HttpServletRequest request) {\n\n        var authHeader = request.getHeader(\"Authorization\");\n        if (authHeader == null || !authHeader.startsWith(\"Bearer \")) {\n            return null;\n        }\n\n        var jwt = authHeader.substring(7);\n        return new JWTAuthentication(jwt);\n    }\n    \n}\n", "package com.example.blog_server.security;\n\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.security.web.authentication.AuthenticationFilter;\n\npublic class JWTAuthenticationFilter extends AuthenticationFilter{\n    \n    \n    private JWTAuthenticationManager jwtAuthenticationManager;\n    \n    public JWTAuthenticationFilter(JWTAuthenticationManager jwtAuthenticationManager) {\n        super(jwtAuthenticationManager, new JWTAuthenticationConverter());\n\n        this.setSuccessHandler((request, response, authentication) -> {\n            SecurityContextHolder.getContext().setAuthentication(authentication);\n        });\n    }\n\n}\n", "package com.example.blog_server.security;\n\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.AuthenticationException;\n\nimport com.example.blog_server.user.UserService;\n\npublic class JWTAuthenticationManager implements AuthenticationManager {\n    private JWTService jwtService;\n    private UserService userService;\n\n    public JWTAuthenticationManager(JWTService jwtService, UserService userService){\n        this.jwtService = jwtService;\n        this.userService = userService;\n\n    }\n\n    @Override\n    public Authentication authenticate(Authentication authentication) throws AuthenticationException {\n        if(authentication instanceof JWTAuthentication){\n            var jwtAuthentication = (JWTAuthentication)authentication;\n\n            var jwt = jwtAuthentication.getCredentials();\n            var userId = jwtService.retrieveUserId(jwt);\n            var userEntity = us", "dentials();\n            var userId = jwtService.retrieveUserId(jwt);\n            var userEntity = userService.getUser(userId);\n\n            jwtAuthentication.userEntity = userEntity;\n            jwtAuthentication.setAuthenticated(true);\n\n            return jwtAuthentication;\n        }\n        \n\n        // TODO Auto-generated method stub\n        throw new IllegalAccessError(\"Cannot authenticate with non-JWT authentication\");\n    }\n}\n", "package com.example.blog_server.security;\n\nimport java.util.Date;\n\nimport org.springframework.stereotype.Service;\n\nimport com.auth0.jwt.JWT;\nimport com.auth0.jwt.algorithms.Algorithm;\n\n@Service\npublic class JWTService {\n    private static final String JWT_KEY = \"jh537bkv323ug98dby0aqruboi29g847ty905\";\n    private Algorithm algorithm = Algorithm.HMAC256(JWT_KEY);\n\n    public String createJwt(Long userId){\n        return JWT.create().withSubject(userId.toString())\n                .withIssuedAt(new Date())\n                //.withExpiresAt()\n                .sign(algorithm);\n    }\n\n    public Long retrieveUserId(String jwtString){\n        var decodedJWT = JWT.decode(jwtString);\n        var userId = Long.valueOf(decodedJWT.getSubject());\n        return userId;\n    }\n\n}\n", "package com.example.blog_server.user;\n\nimport java.net.URI;\n\nimport org.modelmapper.ModelMapper;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.CrossOrigin;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport com.example.blog_server.common.dtos.ErrorResponse;\nimport com.example.blog_server.email.EmailDetails;\nimport com.example.blog_server.email.EmailServiceImpl;\nimport com.example.blog_server.security.JWTService;\nimport com.example.blog_server.user.dtos.CreateUserRequest;\nimport com.example.blog_server.user.dtos.LoginUserRequest;\nimport com.example.blog_server.user.dtos.User", "rt com.example.blog_server.user.dtos.LoginUserRequest;\nimport com.example.blog_server.user.dtos.UserResponse;\n\n@RestController\n@RequestMapping(\"/users\")\npublic class UserController {\n    \n    private final UserService userService;\n    private final ModelMapper modelMapper;\n    private final JWTService jwtService;\n    private final EmailServiceImpl emailService;\n\n    public UserController(UserService userService, ModelMapper modelMapper, JWTService jwtService,EmailServiceImpl emailService){\n        this.userService = userService;\n        this.modelMapper = modelMapper;\n        this.jwtService = jwtService;\n        this.emailService = emailService;\n    }\n\n    @PostMapping(\"\")\n    ResponseEntity<UserResponse> signupUser(@RequestBody CreateUserRequest request){\n        UserEntity savedUser = userService.createUser(request);\n        URI savedUserUri = URI.create(\"/users/\"+savedUser.getId());\n        var userResponse = modelMapper.map(savedUser, UserResponse.class);\n        userResponse.setT", "        var userResponse = modelMapper.map(savedUser, UserResponse.class);\n        userResponse.setToken(jwtService.createJwt(savedUser.getId()));\n        EmailDetails e = EmailDetails.builder()\n        .recipient(savedUser.getEmail())\n        .msgBody(\"You have Successfully registered in BlogZeee, \\n\\n\\n\\nhappy writing\")\n        .subject(\"subss\")\n        //.attachment(null)\n        .build();\n\n        emailService.sendSimpleEmail(e);\n        return ResponseEntity.created(savedUserUri).body(userResponse);\n    }   \n\n\n    @PostMapping(\"/login\")\n    ResponseEntity<UserResponse> loginUser(@RequestBody LoginUserRequest request){\n        UserEntity savedUser = userService.loginUser(request.getUsername(), request.getPassword());\n        var userResponse = modelMapper.map(savedUser, UserResponse.class);\n        userResponse.setToken(\n                jwtService.createJwt(savedUser.getId())\n        );\n\n        return ResponseEntity.ok(userResponse);\n    }\n\n    @ExceptionHandler({\n            User", " );\n\n        return ResponseEntity.ok(userResponse);\n    }\n\n    @ExceptionHandler({\n            UserService.UserNotFoundException.class,\n            UserService.InvalidCredentialsException.class\n    })\n    ResponseEntity<ErrorResponse> handleUserExceptions(Exception ex) {\n        String message;\n        HttpStatus status;\n\n        if (ex instanceof UserService.UserNotFoundException) {\n            message = ex.getMessage();\n            status = HttpStatus.NOT_FOUND;\n        } else if (ex instanceof UserService.InvalidCredentialsException) {\n            message = ex.getMessage();\n            status = HttpStatus.UNAUTHORIZED;\n        } else {\n            message = \"Something went wrong\";\n            status = HttpStatus.INTERNAL_SERVER_ERROR;\n        }\n\n         \n        ErrorResponse response = ErrorResponse.builder()\n        .message(message)\n        .build();               \n\n        return ResponseEntity.status(status).body(response);\n    }\n\n    @GetMapping(\"\")\n    ResponseEntity<String", "n ResponseEntity.status(status).body(response);\n    }\n\n    @GetMapping(\"\")\n    ResponseEntity<String> test(){\n        return ResponseEntity.ok(\"success\");\n    }\n}\n", "package com.example.blog_server.user;\n\nimport org.springframework.lang.NonNull;\nimport org.springframework.lang.Nullable;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport lombok.AccessLevel;\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.RequiredArgsConstructor;\nimport lombok.Setter;\nimport lombok.ToString;\n\n@Builder\n@NoArgsConstructor(access = AccessLevel.PROTECTED)\n@AllArgsConstructor\n@RequiredArgsConstructor\n@ToString\n@Getter\n@Setter\n@Entity(name = \"users\")\npublic class UserEntity {\n    @Id\n    @GeneratedValue(strategy = GenerationType.SEQUENCE)\n    @Column(nullable=false)\n    private Long id;\n\n    @Column(nullable = false)\n    @NonNull\n    private String username;\n\n    @Column(nullable = false)\n    @NonNull\n    private String password;\n\n    @Column(nullable = f", ";\n\n    @Column(nullable = false)\n    @NonNull\n    private String password;\n\n    @Column(nullable = false)\n    @NonNull\n    private String email;\n\n    @Column(nullable = true)\n    @Nullable\n    private String bio;\n\n\n    @Column(nullable = true)\n    @Nullable\n    private String image;\n\n}\n", "package com.example.blog_server.user;\n\nimport java.util.Optional;\n\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface UserRepository extends JpaRepository<UserEntity,Long> {\n    Optional<UserEntity> findByUsername(String username);\n}\n", "package com.example.blog_server.user;\n\nimport org.modelmapper.ModelMapper;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.stereotype.Service;\n\nimport com.example.blog_server.user.dtos.CreateUserRequest;\n\n@Service\npublic class UserService {\n\n    private final UserRepository usersRepository;\n    private final ModelMapper modelMapper;\n    private final PasswordEncoder passwordEncoder;\n\n    public UserService(UserRepository usersRepository, ModelMapper modelMapper,PasswordEncoder passwordEncoder) {\n        this.usersRepository = usersRepository;\n        this.modelMapper = modelMapper;\n        this.passwordEncoder = passwordEncoder;\n    }\n\n    public UserEntity createUser(CreateUserRequest u){\n        UserEntity newUser = modelMapper.map(u ,UserEntity.class);\n        newUser.setPassword(passwordEncoder.encode(u.getPassword()));//todo password encoder\n        return usersRepository.save(newUser);\n    }\n\n    public UserEntity getUser(String use", "ncoder\n        return usersRepository.save(newUser);\n    }\n\n    public UserEntity getUser(String username){\n        return usersRepository.findByUsername(username).orElseThrow(()-> new UserNotFoundException(username));\n    }\n\n    public UserEntity getUser(Long userId) {\n        return usersRepository.findById(userId).orElseThrow(() -> new UserNotFoundException(userId));\n    }\n\n    public UserEntity loginUser(String username, String password){\n        var user = usersRepository.findByUsername(username).orElseThrow(() -> new UserNotFoundException(username));\n        var passMatch = passwordEncoder.matches(password, user.getPassword());\n        if(!passMatch) throw new InvalidCredentialsException();\n        return user;\n    }\n\n\n\n    public static class UserNotFoundException extends IllegalArgumentException {\n        public UserNotFoundException(String username) {\n            super(\"User with username: \" + username + \" not found\");\n        }\n\n        public UserNotFoundException(Long userI", "h username: \" + username + \" not found\");\n        }\n\n        public UserNotFoundException(Long userId) {\n            super(\"User with id: \" + userId + \" not found\");\n        }\n    }\n\n    public static class InvalidCredentialsException extends IllegalArgumentException {\n        public InvalidCredentialsException() {\n            super(\"Invalid username or password combination\");\n        }\n    }\n}\n", "package com.example.blog_server.user.dtos;\n\nimport org.springframework.lang.NonNull;\n\nimport lombok.AccessLevel;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.Setter;\n\n@Data\n@Setter(AccessLevel.NONE)\n@Builder\npublic class CreateUserRequest {\n\n    @NonNull\n    private String username;\n\n    @NonNull\n    private String password;\n\n    @NonNull\n    private String email;\n\n}\n", "package com.example.blog_server.user.dtos;\n\nimport org.springframework.lang.NonNull;\n\nimport lombok.AccessLevel;\nimport lombok.Data;\nimport lombok.Setter;\n\n@Data\n@Setter(AccessLevel.NONE)\npublic class LoginUserRequest {\n    @NonNull\n    private String username;\n    @NonNull\n    private String password;\n}", "package com.example.blog_server.user.dtos;\n\nimport lombok.Data;\n\n@Data\npublic class UserResponse {\n    private Long id;\n    private String username;\n    private String email;\n    private String bio;\n    private String image;\n    private String token;\n}"]