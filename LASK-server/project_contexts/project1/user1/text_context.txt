File: src\main\java\com\example\blog_server\comments\CommentRepository.java
package com.example.blog_server.comments;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface CommentRepository extends JpaRepository<CommentEntity, Long> {
    List<CommentEntity> findAllByArticleId(Long articleId);
    void deleteAllByArticleId(Long articleId);
}


File: src\main\java\com\example\blog_server\comments\CommentService.java
package com.example.blog_server.comments;

import java.util.Optional;

import org.springframework.stereotype.Service;

import com.example.blog_server.article.ArticleEntity;
import com.example.blog_server.article.ArticleRepository;
import com.example.blog_server.article.ArticleService;
import com.example.blog_server.comments.dtos.CreateCommentRequest;
import com.example.blog_server.user.UserRepository;
import com.example.blog_server.user.UserService;

@Service
public class CommentService {
    private final CommentRepository commentRepository;
    private final ArticleRepository articleRepository;
    private final UserRepository userRepository;

    public CommentService(CommentRepository commentRepository, ArticleRepository articleRepository, UserRepository userRepository) {
        this.commentRepository = commentRepository;
        this.articleRepository = articleRepository;
        this.userRepository = userRepository;
    }

    public Iterable<CommentEntity> getCommentsByArticle(Long articleId) {
        return commentRepository.findAllByArticleId(articleId);
    }

    public CommentEntity createComment(CreateCommentRequest request, Long authorId, Long articleId) {
        var article = articleRepository.findById(articleId)
                .orElseThrow(() -> new ArticleService.ArticleNotFoundException(articleId));

        var author = userRepository.findById(authorId)
                .orElseThrow(() -> new UserService.UserNotFoundException(authorId));

        var comment = CommentEntity.builder()
                .body(request.getBody())
                .title(request.getTitle())
                .article(article)
                .author(author)
                .build();

        return commentRepository.save(comment);
    }

    public void deleteComment(Long commentId, Long userId) {
        var comment = commentRepository.findById(commentId)
                .orElseThrow(() -> new CommentNotFoundException(commentId));

        if (!comment.getAuthor().getId().equals(userId)) {
            throw new UnauthorizedException("You are not authorized to delete this comment");
        }

        commentRepository.deleteById(commentId);
    }
    
    public void deleteAllByArticleId(Long articleId) {
        commentRepository.deleteAllByArticleId(articleId);
    }

    static class UnauthorizedException extends RuntimeException {
        public UnauthorizedException(String message) {
            super(message);
        }
    }

    static class CommentNotFoundException extends IllegalArgumentException {
        public CommentNotFoundException(Long id) {
            super("Comment with id: " + id + " not found");
        }
    }
}


File: src\main\java\com\example\blog_server\comments\CommentsController.java
package com.example.blog_server.comments;

import org.springframework.web.bind.annotation.*;
import com.example.blog_server.article.ArticleService;
import com.example.blog_server.comments.dtos.CreateCommentRequest;
import com.example.blog_server.security.JWTService;

@RestController
@RequestMapping("/articles/{articleSlug}/comments")
public class CommentsController {

    private final CommentService commentService;
    private final ArticleService articleService;

    private final JWTService jwtService;

    public CommentsController(CommentService commentService, ArticleService articleService, JWTService jwtService) {
        this.commentService = commentService;
        this.articleService = articleService;
        this.jwtService = jwtService;
    }



    @GetMapping
    public Iterable<CommentEntity> getCommentsByArticleSlug(@PathVariable("articleSlug") String articleSlug) {
        // Get the article by slug
        var article = articleService.getArticleBySlug(articleSlug);
        // Fetch comments for the article
        return commentService.getCommentsByArticle(article.getId());
    }

    @PostMapping
    public CommentEntity createComment(@PathVariable("articleSlug") String articleSlug,
                                       @RequestBody CreateCommentRequest request,
                                       @RequestHeader("Authorization") String token) {
        // Extract userId from JWT token
        Long userId = extractUserIdFromToken(token);
        // Get the article by slug
        var article = articleService.getArticleBySlug(articleSlug);
        // Create and return the new comment
        return commentService.createComment(request, userId, article.getId());
    }

    @DeleteMapping("/{commentId}")
    public void deleteComment(@PathVariable("articleSlug") String articleSlug,
                              @PathVariable("commentId") Long commentId,
                              @RequestHeader("Authorization") String token) {
        // Extract userId from JWT token
        Long userId = extractUserIdFromToken(token);
        // Delete the comment
        commentService.deleteComment(commentId, userId);
    }

    private Long extractUserIdFromToken(String token) {
        // Assuming the JWT token starts with "Bearer "
        String jwtToken = token.substring(7);
        return jwtService.retrieveUserId(jwtToken);
    }

    
}


File: src\main\java\com\example\blog_server\comments\dtos\CreateCommentRequest.java
package com.example.blog_server.comments.dtos;

import lombok.Builder;
import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
@Builder
public class CreateCommentRequest {
    private String title;
    private String body;
}


